{"version":3,"sources":["components/Helpers/FileHelpers.js","components/EditorComponents/DragandDrop.js","components/EditorComponents/Toolbar.js","components/EditorComponents/TextComponents/FontSizeSelector.js","components/EditorComponents/TextComponents/FontAlignmentSelector.js","components/EditorComponents/TextComponents/FontFamilySelector.js","components/EditorComponents/BottomToolbars/TextBottomToolbar.js","components/EditorComponents/BottomToolbars/LineBottomToolbar.js","components/EditorComponents/BottomToolbars/RectBottomToolbar.js","components/EditorComponents/BottomToolbars/ImageBottomToolbar.js","components/EditorComponents/BottomToolbar.js","components/EditorComponents/ToolShapes/CopytoClipboardButton.js","components/EditorComponents/SecondaryDragandDrop.js","components/EditorComponents/ToolShapes/CvText.js","components/EditorComponents/ToolShapes/Selector.js","components/EditorComponents/ToolShapes/FreeLine.js","components/EditorComponents/ToolShapes/StraightLine.js","components/EditorComponents/ToolShapes/Rectangle.js","components/EditorComponents/ToolShapes/Ellipse.js","components/Editor.js","components/Home.js","components/NoMatch.js","App.js","reportWebVitals.js","index.js"],"names":["validateFile","file","indexOf","type","dragOver","e","preventDefault","dragEnter","target","classList","toggle","dragLeave","DragandDrop","props","imgLoader","bind","console","log","files","dataTransfer","length","reader","FileReader","readAsDataURL","onload","image","Image","src","result","className","id","onDragOver","onDragEnter","onDragLeave","onDrop","this","fileDrop","React","Component","Toolbar","toolUpdater","darkTheme","createMuiTheme","palette","ThemeProvider","theme","ToggleButtonGroup","value","tool","exclusive","onChange","event","newSelection","aria-label","orientation","ToggleButton","Tooltip","title","placement","TransitionComponent","Zoom","arrow","FontSizeSelector","sizeRef","createRef","handleToolbarOnChange","updater","toolbarHandler","ButtonGroup","size","Button","onClick","current","parseInt","TextField","inputRef","label","defaultValue","Number","isInteger","InputLabelProps","shrink","inputProps","style","textAlign","variant","width","FontAlignmentSelector","handleAlignment","FontFamilySelector","useState","fontList","setFontList","fontCheck","Set","sort","useEffect","a","document","fonts","ready","fontAvailable","values","font","check","add","Array","from","FormControl","InputLabel","Select","map","index","MenuItem","fontFamily","FormHelperText","TextBottomToolbar","handleAlignmentChange","setState","alignment","alignmentUpdater","handleFontFamilyChange","fontFamilyUpdater","handleFontSizeChange","fontSize","fontSizeUpdater","handleFontColorChange","fontColor","fontColorUpdater","handleStrokeColorChange","strokeColor","strokeColorUpdater","handleStrokeSizeChange","state","strokeWidth","strokeSizeUpdater","strokeSliderRef","createColor","changeAlignment","changeFont","changeFontSize","changeFontColor","changeStrokeColor","changeStroke","classes","root","Grid","container","spacing","justify","item","xs","sm","md","Paper","elevation","Typography","color","gutterBottom","hideTextfield","Slider","ref","aria-labelledby","valueLabelDisplay","step","marks","min","max","withStyles","flexGrow","paper","padding","text","secondary","arrayEquals","b","isArray","every","val","LineBottomToolbar","handleShadowColorChange","shadowColor","shadowColorUpdater","handleShadowSizeChange","shadowSize","shadowSizeUpdater","shadowWidth","handleDashChange","dash","dashValue","dashUpdater","dashValues","continuous","dashLine","dotLine","dashAndDots","changeShadowColor","changeShadowWidth","changeDash","RectBottomToolbar","handleCornerRadiusChange","cornerRadius","cornerRadiusUpdater","handleFillChange","fill","fillUpdater","changeCornerRadius","changeFill","disabled","disableCornerRadius","ImageBottomToolbar","handleFilterChange","selectedFilter","selectedFilterValue","blurValue","sliderMin","sliderMax","sliderStep","brightenValue","noiseValue","pixelSizeValue","thresholdValue","handleFilterValueChange","blurValueUpdater","brightnessValueUpdater","noiseValueUpdater","pixelValueUpdater","maskValueUpdater","changeBlurValue","changeBrightnessValue","changePixelSizeValue","changeNoiseValue","changeThresholdValue","BottomToolbar","bottomToolbarRef","selectedToolbar","newToolbarName","bottomToolbar","updateToolbar","Fragment","getBottomToolbar","CopytoClipboardButton","imageCopytoClipboard","copyHandler","open","setOpen","enabled","setTimeout","FileCopy","containerdragOver","containerdragEnter","containerdragLeave","SecondaryDragandDrop","setWidth","height","setHeight","updateState","lastTarget","canvas","getElementById","childNodes","firstChild","clientWidth","clientHeight","window","addEventListener","removeEventListener","querySelector","visibility","opacity","hideDropzone","handleTextDblClick","new_text","CvText","stage","stageRef","selectedItemChanger","changeSelectedItem","x","evt","offsetX","y","offsetY","align","stroke","draggable","itemArray","push","forceUpdate","textRef","editText","editarea","createElement","body","appendChild","stageBox","getBoundingClientRect","getAttr","position","abs_pos","getAbsolutePosition","top","left","webkitTextStroke","webkitTextStrokeWidth","margin","lineHeight","resize","background","border","outline","transformOrigin","rotation","rot_transformation","transform","hide","focus","setSelectionRange","batchDraw","setAttrs","show","removeChild","onTransform","scaleX","scaleY","onDblClick","onDblTap","handleSelectorMouseDown","transformer","transformerRef","isTransforming","kvMainImageRef","handleFreeLineMouseDown","pos","getPointerPosition","new_line","lineRef","lineCap","hex","globalCompositeOperation","points","shadowBlur","isDrawing","handleFreeLineMouseMove","lastLine","newLinePoints","concat","handleFreeLineMouseUp","handleStraightLineMouseDown","handleStraightLineMouseMove","handleStraightLineMouseUp","handleRectangleMouseDown","new_rect","rectRef","lastRectangle","handleRectangleMouseMove","lrData","Math","abs","handleRectangleMouseUp","handleEllipseMouseDown","handleEllipseMouseMove","handleEllipseMouseUp","primary","blue","purple","Editor","mainLayerRef","lastRectAttrs","selectedTool","handlePaste","tabIndex","handleKeyDown","node","nodes","nodeattrs","getAttrs","changeBottomToolbar","blurRadius","brightness","pixelSize","noise","threshold","bottomToolbarName","correlation","visible","canvas_container","calculate_resize","data","toDataURL","pixelRatio","download_link","download","href","click","blob","dataurl","arr","split","mime","match","bstr","atob","n","u8arr","Uint8Array","charCodeAt","Blob","dataURLtoBlob","navigator","clipboard","write","ClipboardItem","error","destroy","element","duplicate","cloneElement","newTool","reduction","mainimage","new_size","newImageRef","new_image","filters","Konva","Filters","Blur","Brighten","Noise","Pixelate","Mask","changeSelectedTool","pasted_file","clipboardData","handleMainPaste","handleSecondaryPaste","imageLoader","createNewSecondaryImage","charCode","String","fromCharCode","which","toLowerCase","ctrlKey","duplicateSelectedItem","keyCode","deleteSelectedItem","handleDelete","handleCtrlplusKey","newSize","setAttr","getStage","newColor","line","newFont","newAlignment","newRadius","rect","newValue","img","cache","onMouseDown","handleCanvasMouseDown","onMouseMove","handleCanvasMouseMove","onMouseUp","handleCanvasMouseUp","onMouseLeave","handleCanvasMouseLeave","handleCanvasDblClick","Item","rotateEnabled","keepRatio","imageUnloader","imageDownloader","updateTextSize","updateTextColor","updateStrokeColor","updateStrokeSize","updateFontFamily","updateFontAlignment","updateShadowColor","updateShadowSize","updateDash","updateCornerRadius","updateFill","updateBlur","updateBrightness","updateNoise","updatePixelate","updateMask","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7b520617.chunk.js","sourcesContent":["//From: https://gist.github.com/wuchengwei/b7e1820d39445f431aeaa9c786753d8e\n//**dataURL to blob**\nexport function dataURLtoBlob(dataurl) {\n    var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);\n    while(n--){\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new Blob([u8arr], {type:mime});\n}\n\nexport function validateFile(file){\n    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];\n\n    if (validTypes.indexOf(file.type) === -1) {\n        return false;\n    }\n    return true;\n}","import React from 'react';\n\nimport '../../assets/css/draganddrop.css';\nimport {validateFile} from '../Helpers/FileHelpers'\n\nconst dragOver = (e) => {\n    e.preventDefault();\n}\n\nconst dragEnter = (e) => {\n    e.preventDefault();\n    e.target.classList.toggle('shake');\n}\n\nconst dragLeave = (e) => {\n    e.preventDefault();\n    e.target.classList.toggle('shake');\n}\n\nclass DragandDrop extends React.Component{\n    \n    constructor(props){\n        super(props);\n\n        this.imgLoader = props.imgLoader.bind(this);\n    }\n\n    fileDrop(e) {\n        e.preventDefault();\n        console.log(e)\n        e.target.classList.toggle('shake');\n        const files = e.dataTransfer.files;\n\n        if (files.length) {\n            //Nos quedamos solo con el primer archivo\n            //Cambiar por un for si queremos tratar con multiselecciones\n            if (validateFile(files[0])) {\n\n                const reader = new FileReader();\n                reader.readAsDataURL(files[0]);\n                reader.onload = (e) => {\n\n                    //Create image from load\n                    let image = new Image();\n                    image.src = e.target.result;\n\n                    image.onload = () => {\n                        //send image to editor\n                        this.imgLoader(image);\n                    }\n                    \n                }\n            //File not valid\n            } else {\n        \n            }\n        }\n    }\n\n    render(){\n        return(\n            <div className=\"drop-container \"\n                id=\"maindropcontainer\"\n                onDragOver={dragOver}\n                onDragEnter={dragEnter}\n                onDragLeave={dragLeave}\n                onDrop={this.fileDrop.bind(this)}\n            >\n                <div className=\"drop-message d-flex flex-column justify-content-center\">\n                    <div className=\"upload-icon m-4 align-self-center\"></div>\n                    <span className=\"w-100\">Drag & Drop to start editing!</span>\n                    <span>Or press Ctrl + V to add from clipboard!</span>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default DragandDrop;","import React from 'react';\n\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nimport {createMuiTheme} from '@material-ui/core/styles'\nimport {ThemeProvider} from '@material-ui/styles'\n\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Zoom from '@material-ui/core/Zoom';\nimport GestureIcon from '@material-ui/icons/Gesture';\nimport Crop169Icon from '@material-ui/icons/Crop169';\nimport FormatShapesIcon from '@material-ui/icons/FormatShapes';\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\n\n\nexport default function Toolbar(props) {\n  //const [selection, setSelection] = React.useState('SelectorAndText');\n  const toolUpdater = props.toolUpdater\n\n  const handleSelection = (event, newSelection) => {\n    if (newSelection !== null) {\n      toolUpdater(newSelection)\n    }\n  };\n\n  const darkTheme = createMuiTheme({\n    palette: {\n      type: 'dark',\n    },\n  });\n  \n  return (\n    <ThemeProvider theme={darkTheme}>\n    <ToggleButtonGroup\n      value={props.tool}\n      exclusive\n      onChange={handleSelection}\n      aria-label=\"text alignment\"\n      orientation=\"vertical\"\n      className=\"menuherramientas\"\n      \n    >\n      \n      <ToggleButton value=\"SelectorAndText\" aria-label=\"Selector\">\n        <Tooltip title=\"Selector and Text creator\" placement=\"left\" TransitionComponent={Zoom} arrow>\n          <FormatShapesIcon/>\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value=\"FreeLine\" aria-label=\"FreeLine\">\n        <Tooltip title=\"Free Line\" placement=\"left\" TransitionComponent={Zoom} arrow>\n          <GestureIcon />\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value=\"StraightLine\" aria-label=\"StraightLine\">\n        <Tooltip title=\"Straight Line\" placement=\"left\" TransitionComponent={Zoom} arrow>\n          <ShowChartIcon />\n        </Tooltip>\n      </ToggleButton>    \n      <ToggleButton value=\"Rectangle\" aria-label=\"Rectangle\">\n        <Tooltip title=\"Rectangle\" placement=\"left\" TransitionComponent={Zoom} arrow>\n        <Crop169Icon />\n        </Tooltip>\n      </ToggleButton>\n      <ToggleButton value=\"Ellipse\" aria-label=\"Ellipse\">\n        <Tooltip title=\"Ellipse\" placement=\"left\" TransitionComponent={Zoom} arrow>\n          <RadioButtonUncheckedIcon />\n        </Tooltip>\n      </ToggleButton>\n      \n    </ToggleButtonGroup>\n    </ThemeProvider>\n  );\n}","import { Button, ButtonGroup, TextField } from \"@material-ui/core\"\nimport { render } from \"@testing-library/react\"\nimport { createRef } from \"react\"\n\n\nexport default function FontSizeSelector(props){\n    const sizeRef = createRef()\n\n    const updateText = props.updater\n\n    const handleToolbarOnChange = props.toolbarHandler\n\n    const handleIncrement = () => { \n        sizeRef.current.value = parseInt(sizeRef.current.value) + 1\n\n        handleToolbarOnChange(sizeRef.current.value)\n    }\n\n    const handleDecrement = () => { \n        let value = sizeRef.current.value\n        if(value > 1){ \n            sizeRef.current.value = value - 1\n\n            handleToolbarOnChange(sizeRef.current.value)\n        } \n    }\n\n    const handleOnChange = (e) => {\n        let value = e.target.value\n        if( Number.isInteger(parseInt(value)) && parseInt(value) > 0){\n            handleToolbarOnChange(parseInt(value))\n        }\n    }\n\n    return(\n        <ButtonGroup className=\"my-2 d-flex flex-wrap\" \n                         size=\"small\" \n                         aria-label=\"small outlined button group\" \n                         orientation='vertical'\n                         >\n            <Button onClick={handleIncrement}>+</Button>\n            <TextField\n              inputRef={sizeRef}\n              label=\"Size\"\n              type=\"number\"\n              value={props.value}\n              defaultValue={70}\n              onChange={handleOnChange}\n              InputLabelProps={{ shrink: true }}\n              inputProps={{style: {textAlign: 'center'}}}\n              variant=\"outlined\"\n              style={{width: \"60px\"}}\n\n            />\n            <Button onClick={handleDecrement}>-</Button>\n        </ButtonGroup>\n    );\n}\n\n","import React, {useState} from 'react';\nimport { render } from \"@testing-library/react\"\nimport { createRef } from \"react\"\n\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\n\nimport FormatAlignLeftIcon from '@material-ui/icons/FormatAlignLeft';\nimport FormatAlignCenterIcon from '@material-ui/icons/FormatAlignCenter';\nimport FormatAlignRightIcon from '@material-ui/icons/FormatAlignRight';\n\nexport default function FontAlignmentSelector(props){\n\n    const alignmentUpdater = props.updater\n\n    const handleAlignment = props.toolbarHandler\n\n    /*  Old handling, now toolbar parent handles the state\n\n    const [alignment, setAlignment] = useState('center')\n    const handleAlignment = (event, newAlignment) => {\n        if(newAlignment != null ){\n          //Change button\n          setAlignment(newAlignment) \n          //Change selected text\n          alignmentUpdater(newAlignment)\n          //notify toolbar\n          props.toolbarHandler(newAlignment)\n        }\n    }*/\n\n    return(\n        <ToggleButtonGroup\n              className={props.className}\n              value={props.value}\n              exclusive\n              size=\"small\"\n              onChange={handleAlignment}\n              aria-label=\"text alignment\"\n            >\n              <ToggleButton value=\"left\" aria-label=\"left aligned\">\n                <FormatAlignLeftIcon />\n              </ToggleButton>\n              <ToggleButton value=\"center\" aria-label=\"centered\">\n                <FormatAlignCenterIcon />\n              </ToggleButton>\n              <ToggleButton value=\"right\" aria-label=\"right aligned\">\n                <FormatAlignRightIcon />\n              </ToggleButton>\n        </ToggleButtonGroup>\n    )\n}\n\n","import React, {useState, useEffect} from 'react'\nimport { FormControl, FormHelperText, InputLabel, MenuItem, Select } from '@material-ui/core'\n\nexport default function FontFamilySelector(props){\n\n    const updateFont = props.updater\n\n    const handleToolbarOnChange = props.toolbarHandler\n\n    const [fontList, setFontList] = useState([]);\n\n    const fontCheck = new Set([\n        // Windows 10\n        'Arial', 'Arial Black', 'Bahnschrift', 'Calibri', 'Cambria', 'Cambria Math', 'Candara', 'Comic Sans MS', 'Consolas', 'Constantia', 'Corbel', 'Courier New', 'Ebrima', 'Franklin Gothic Medium', 'Gabriola', 'Gadugi', 'Georgia', 'HoloLens MDL2 Assets', 'Impact', 'Ink Free', 'Javanese Text', 'Leelawadee UI', 'Lucida Console', 'Lucida Sans Unicode', 'Malgun Gothic', 'Marlett', 'Microsoft Himalaya', 'Microsoft JhengHei', 'Microsoft New Tai Lue', 'Microsoft PhagsPa', 'Microsoft Sans Serif', 'Microsoft Tai Le', 'Microsoft YaHei', 'Microsoft Yi Baiti', 'MingLiU-ExtB', 'Mongolian Baiti', 'MS Gothic', 'MV Boli', 'Myanmar Text', 'Nirmala UI', 'Palatino Linotype', 'Segoe MDL2 Assets', 'Segoe Print', 'Segoe Script', 'Segoe UI', 'Segoe UI Historic', 'Segoe UI Emoji', 'Segoe UI Symbol', 'SimSun', 'Sitka', 'Sylfaen', 'Symbol', 'Tahoma', 'Times New Roman', 'Trebuchet MS', 'Verdana', 'Webdings', 'Wingdings', 'Yu Gothic',\n        // macOS\n        'American Typewriter', 'Andale Mono', 'Arial', 'Arial Black', 'Arial Narrow', 'Arial Rounded MT Bold', 'Arial Unicode MS', 'Avenir', 'Avenir Next', 'Avenir Next Condensed', 'Baskerville', 'Big Caslon', 'Bodoni 72', 'Bodoni 72 Oldstyle', 'Bodoni 72 Smallcaps', 'Bradley Hand', 'Brush Script MT', 'Chalkboard', 'Chalkboard SE', 'Chalkduster', 'Charter', 'Cochin', 'Comic Sans MS', 'Copperplate', 'Courier', 'Courier New', 'Didot', 'DIN Alternate', 'DIN Condensed', 'Futura', 'Geneva', 'Georgia', 'Gill Sans', 'Helvetica', 'Helvetica Neue', 'Herculanum', 'Hoefler Text', 'Impact', 'Lucida Grande', 'Luminari', 'Marker Felt', 'Menlo', 'Microsoft Sans Serif', 'Monaco', 'Noteworthy', 'Optima', 'Palatino', 'Papyrus', 'Phosphate', 'Rockwell', 'Savoye LET', 'SignPainter', 'Skia', 'Snell Roundhand', 'Tahoma', 'Times', 'Times New Roman', 'Trattatello', 'Trebuchet MS', 'Verdana', 'Zapfino',\n        ].sort());\n\n    useEffect(() => {\n        //If fontlist not filled, request it\n        if(fontList.length == 0){\n            (async() => {\n                await document.fonts.ready;\n            \n                const fontAvailable = new Set();\n                for (const font of fontCheck.values()) {\n                    if (document.fonts.check(`12px \"${font}\"`)) {\n                        fontAvailable.add(font);\n                    }\n                }\n                \n                setFontList( Array.from(fontAvailable) )\n            \n                console.log('Available Fonts:', [...fontAvailable.values()]);\n            })()\n        }\n    });\n\n    const handleFontChange = (e) => {\n        handleToolbarOnChange(e.target.value)\n    } \n\n    return(\n        <FormControl className={props.className}>\n            <InputLabel>Font</InputLabel>\n            <Select\n                  value={props.value}\n                  onChange={handleFontChange}\n                >\n                    {fontList.map( (font, index) => (\n                        <MenuItem key={index} \n                                  value={font} \n                                  style={{fontFamily: font}}>\n\n                                    {font}\n                        </MenuItem>\n                    ))\n                    }\n             </Select>\n            <FormHelperText>Choose your font</FormHelperText>\n        </FormControl>\n    );\n}\n\n","import React, { createRef, useCallback, useEffect, useState } from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport { ColorButton, ColorPicker, createColor } from 'material-ui-color'\nimport { Card, Slider, TextField, Tooltip, Typography, Zoom } from '@material-ui/core'\nimport FontSizeSelector from '../TextComponents/FontSizeSelector'\nimport FontAlignmentSelector from '../TextComponents/FontAlignmentSelector'\nimport FontFamilySelector from '../TextComponents/FontFamilySelector'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\n\n\nconst styles = theme => ({\n    root: {\n      flexGrow: 0,\n    },\n    paper: {\n      padding: theme.spacing(0),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n    title: {\n      fontSize: 14,\n    },\n})\n\n\nclass TextBottomToolbar extends React.Component{\n  constructor(props){\n    super(props)\n\n    this.strokeSliderRef = createRef()\n\n    this.state = {\n      alignment: 'center',\n      font: 'Impact',\n      fontSize: 70,\n      fontColor: createColor(\"#FFFFFF\"),\n      strokeColor: createColor(\"#000000\"),\n      strokeWidth: 0,\n    }\n  }\n\n  /* /////////////// Change UI functions /////////////// */ \n  // changes the selector state to syncronize it with the text value\n\n  changeAlignment( value ){\n    if(this.state.alignment != value){\n      this.setState({alignment: value})\n    }\n  }\n  \n  changeFont( value ){\n    if(this.state.font != value){\n      this.setState({font: value})\n    }\n  }\n\n  changeFontSize( value ){\n    if(this.state.fontSize != value){\n      this.setState({fontSize: value})\n    }\n  }\n  //value should be a hex string not a color\n  changeFontColor( value ){\n    if(this.state.fontColor != value){\n      this.setState({fontColor: createColor(value)})\n    }\n  }\n  //value should be a hex string not a color\n  changeStrokeColor( value ){\n    if(this.state.strokeColor != value){\n      this.setState({strokeColor: createColor(value)})\n    }\n  }\n\n  changeStroke( value ){\n    if(this.state.strokeWidth != value){\n      this.setState({strokeWidth: value})\n    }\n  }\n\n  updateToolbar( alignment, font, fontSize, fontColor, strokeColor, strokeWidth){\n\n    console.log(this)\n\n    if( alignment != null)\n      this.changeAlignment(alignment)\n\n    if( font != null)\n      this.changeFont(font)\n\n    if( fontSize != null)\n      this.changeFontSize(fontSize)\n\n    if( fontColor != null)\n      this.changeFontColor(fontColor)\n\n    if( strokeColor != null)\n      this.changeStrokeColor(strokeColor)\n\n    if( strokeWidth != null)\n      this.changeStroke(strokeWidth)\n  }\n\n  /*  ////////////////////////////////////////////////  */\n\n  /* /////////////// Handlers /////////////// */ \n  // updaters, update the canvas item\n  // state updates toolbar elements\n\n  handleAlignmentChange = (event, value) => {\n    if(value != null){\n      this.setState({alignment: value})\n      this.props.alignmentUpdater(value)\n    }\n  }\n\n  handleFontFamilyChange = (value) => {\n    this.setState({font: value})\n    this.props.fontFamilyUpdater(value)\n  }\n\n  handleFontSizeChange = (value) => {\n    this.setState({fontSize: value})\n    this.props.fontSizeUpdater(value)\n  }\n\n  handleFontColorChange = (value) => {\n    this.setState({fontColor: value})\n    this.props.fontColorUpdater(value)\n  }\n\n  handleStrokeColorChange = (value) => {\n    this.setState({strokeColor: value})\n    this.props.strokeColorUpdater(value)\n  }\n\n  handleStrokeSizeChange = (event, value) => {\n    //event triggers onmousemove, so it floods, change state\n    //only when value changes (performance)\n    if(this.state.strokeWidth != value){\n      this.props.strokeSizeUpdater(value)\n      this.setState({strokeWidth: value})\n    }\n  }\n\n  /*  ////////////////////////////////////////////////  */\n\n  render(){\n    const { classes } = this.props\n    return (\n      <div id='bottomtoolbar' className={classes.root}>\n          <Grid container spacing={0} justify=\"space-evenly\">\n          <Grid item xs={7} sm={6} md={4}>\n            <Paper className=\"m-3 d-flex justify-content-around align-items-center\" elevation={3}>\n              <FontAlignmentSelector //updater={this.props.alignmentUpdater}\n                                      toolbarHandler={this.handleAlignmentChange.bind(this)}\n                                      value={this.state.alignment}\n              />\n              \n              <div className=\"\">\n              <FontFamilySelector //updater={this.props.fontFamilyUpdater}\n                                  className=\"w-100\"\n                                  toolbarHandler={this.handleFontFamilyChange.bind(this)}\n                                  value={this.state.font}\n              />\n              </div>\n\n              <FontSizeSelector //updater={this.props.fontSizeUpdater}\n                                toolbarHandler={this.handleFontSizeChange.bind(this)}\n                                value={this.state.fontSize}\n              />  \n            </Paper>\n          </Grid>\n          <Grid item xs={5} sm={6} md={5} className=\"d-flex\">\n            <Paper className=\"m-3 p-2 d-flex justify-content-around align-items-center flex-grow-1\" \n                   elevation={3}>\n                <Paper className=\"p-2 d-flex flex-column justify-content-around align-items-center\" variant=\"outlined\">\n                  <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    Font Color\n                  </Typography>\n                  <ColorPicker \n                        defaultValue={this.state.fontColor} \n                        value={this.state.fontColor}\n                        onChange={this.handleFontColorChange.bind(this)}\n                        hideTextfield/>\n                </Paper>\n                <Paper className=\"p-2 d-flex flex-column justify-content-around align-items-center\" variant=\"outlined\">\n                  <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    Stroke Color\n                  </Typography>\n                  <ColorPicker \n                        defaultValue={this.state.strokeColor} \n                        value={this.state.strokeColor}\n                        onChange={this.handleStrokeColorChange.bind(this)}\n                        hideTextfield\n                  />\n                </Paper>\n                <Paper className=\"p-2 w-50\" variant=\"outlined\">\n                  <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    Stroke Width\n                  </Typography>\n                  <div className=\"m-2 pr-2\">\n                    <Slider\n                      ref={this.strokeSliderRef}\n                      defaultValue={0}\n                      value={this.state.strokeWidth}\n                      //getAriaValueText={valuetext}\n                      aria-labelledby=\"discrete-slider\"\n                      valueLabelDisplay=\"auto\"\n                      step={1}\n                      marks\n                      min={0}\n                      max={15}\n                      onChange={this.handleStrokeSizeChange.bind(this)}\n                    />\n                  </div>\n                </Paper>\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n  \n}\n\nTextBottomToolbar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(TextBottomToolbar)\n","import React, { createRef } from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport { ColorPicker, createColor } from 'material-ui-color'\nimport { Select, Slider, Typography, MenuItem } from '@material-ui/core'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\n\nconst styles = theme => ({\n    root: {\n      flexGrow: 0,\n    },\n    paper: {\n      padding: theme.spacing(0),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n    title: {\n      fontSize: 14,\n    },\n}) \n\nfunction arrayEquals(a, b) {\n  return Array.isArray(a) &&\n    Array.isArray(b) &&\n    a.length === b.length &&\n    a.every((val, index) => val === b[index]);\n}\n\nclass LineBottomToolbar extends React.Component{\n  constructor(props){\n    super(props)\n\n    this.state = {\n      strokeColor: createColor(\"#000000\"),\n      strokeWidth: 6,\n      shadowColor: createColor(\"#000000\"),\n      shadowWidth: 0,\n      dashValue: false\n    }\n    \n    this.dashValues = {\n      continuous  : false,\n      dashLine    : [35, 30],\n      dotLine     : [0.001, 30],\n      dashAndDots : [29, 25, 0.001, 25]\n    }\n\n  }\n\n  /* /////////////// Change UI functions /////////////// */ \n  // changes the selector state to syncronize it with the text value\n\n  //value should be a hex string not a color\n  changeStrokeColor( value ){\n    if(this.state.strokeColor != value){\n      this.setState({strokeColor: createColor(value)})\n    }\n  }\n\n  changeStroke( value ){\n    if(this.state.strokeWidth != value){\n      this.setState({strokeWidth: value})\n    }\n  }\n\n  //value should be a hex string not a color\n  changeShadowColor( value ){\n    if(this.state.shadowColor != value){\n      this.setState({shadowColor: createColor(value)})\n    }\n  }\n\n  changeShadowWidth( value ){\n    if(this.state.shadowWidth != value){\n      this.setState({shadowWidth: value})\n    }\n  }\n\n  changeDash( value ){\n    if(this.state.dashValue != value){\n      this.setState({dashValue: value})\n    }\n  }\n\n  updateToolbar(strokeColor, strokeWidth, shadowColor, shadowWidth, dashValue){\n    if( strokeColor != null)\n      this.changeStrokeColor(strokeColor)\n\n    if( strokeWidth != null)\n      this.changeStroke(strokeWidth)\n\n    if( shadowColor != null)\n      this.changeShadowColor(shadowColor)\n\n    if( shadowWidth != null)\n      this.changeShadowWidth(shadowWidth)\n\n    //Selector value should be the same object to work properly so\n    //here we compare to the object and replace value with it\n    if( dashValue != null){\n      if(dashValue == this.dashValues.continuous){\n        this.changeDash(this.dashValues.continuous)\n      } else if( arrayEquals(dashValue, this.dashValues.dashLine) ){\n        this.changeDash(this.dashValues.dashLine)\n      } else if( arrayEquals(dashValue, this.dashValues.dotLine) ){\n        this.changeDash(this.dashValues.dotLine)\n      } else if( arrayEquals(dashValue, this.dashValues.dashAndDots) ){\n        this.changeDash(this.dashValues.dashAndDots)\n      } \n    }\n  }\n\n  /*  ////////////////////////////////////////////////  */\n\n  /* /////////////// Handlers /////////////// */ \n  // updaters, update the canvas item\n  // state updates toolbar elements\n\n\n  handleStrokeColorChange = (value) => {\n    this.setState({strokeColor: value})\n    this.props.strokeColorUpdater(value)\n  }\n\n  handleShadowColorChange = (value) => {\n    this.setState({shadowColor: value})\n    this.props.shadowColorUpdater(value)\n  }\n\n  handleStrokeSizeChange = (event, value) => {\n    //event triggers onmousemove, so it floods, change state\n    //only when value changes (performance)\n    if(this.state.strokeWidth != value){\n      this.props.strokeSizeUpdater(value)\n      this.setState({strokeWidth: value})\n    }\n  }\n\n  handleShadowSizeChange = (event, value) => {\n    //event triggers onmousemove, so it floods, change state\n    //only when value changes (performance)\n    if(this.state.shadowSize != value){\n      this.props.shadowSizeUpdater(value)\n      this.setState({shadowWidth: value})\n    }\n  }\n\n  handleDashChange = (event) => {\n    let value = event.target.value\n    console.log(\"Cambiando \", value)\n    if(this.state.dash != value){\n\n      this.setState({dashValue: value})\n      this.props.dashUpdater(value)\n    }\n  }\n\n  /*  ////////////////////////////////////////////////  */\n\n  render(){\n    const { classes } = this.props\n    return (\n      <div id='bottomtoolbar' className={classes.root}>\n          <Grid container spacing={0} justify=\"space-evenly\">\n          <Grid item xs={4} sm={4} md={4} className=\"d-flex\">\n          <Paper className=\"m-3 p-2 d-flex justify-content-around align-items-center flex-grow-1\" \n                   elevation={3}>\n                <Paper className=\"p-2 d-flex flex-column justify-content-around align-items-center\" variant=\"outlined\">\n                  <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    Shadow Color\n                  </Typography>\n                  <ColorPicker \n                        defaultValue={this.state.shadowColor} \n                        value={this.state.shadowColor}\n                        onChange={this.handleShadowColorChange.bind(this)}\n                        hideTextfield\n                  />\n                </Paper>\n                <Paper className=\"p-2 w-50\" variant=\"outlined\">\n                  <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    Shadow Width\n                  </Typography>\n                  <div className=\"m-2 pr-2\">\n                    <Slider\n                      value={this.state.shadowWidth}\n                      //getAriaValueText={valuetext}\n                      aria-labelledby=\"discrete-slider\"\n                      valueLabelDisplay=\"auto\"\n                      step={2}\n                      marks\n                      min={0}\n                      max={30}\n                      onChange={this.handleShadowSizeChange.bind(this)}\n                    />\n                  </div>\n                </Paper>\n            </Paper>\n          </Grid>\n          <Grid item xs={4} sm={4} md={4} className=\"d-flex\">\n          <Paper className=\"m-3 p-2 d-flex justify-content-around align-items-center flex-grow-1\" \n                   elevation={3}>\n                <Paper className=\"p-2 w-50\" variant=\"outlined\">\n                  <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    Line Type\n                  </Typography>\n                  <div className=\"m-2 pr-2\">\n                  <Select\n                    className=\"w-100\"\n                    id=\"dashSelector\"\n                    value={this.state.dashValue}\n                    defaultValue={false}\n                    onChange={this.handleDashChange.bind(this)}\n                    label=\"Age\"\n                  >\n                      <MenuItem value={this.dashValues.continuous}>Continuous</MenuItem>\n                      <MenuItem value={this.dashValues.dashLine}>Dashed</MenuItem>\n                      <MenuItem value={this.dashValues.dotLine}>Dots</MenuItem>\n                      <MenuItem value={this.dashValues.dashAndDots}>Dash & Dots</MenuItem>\n                    </Select>\n                  </div>\n                </Paper>\n            </Paper>\n          </Grid>\n          <Grid item xs={4} sm={4} md={4} className=\"d-flex\">\n            <Paper className=\"m-3 p-2 d-flex justify-content-around align-items-center flex-grow-1\" \n                   elevation={3}>\n                <Paper className=\"p-2 d-flex flex-column justify-content-around align-items-center\" variant=\"outlined\">\n                  <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    Stroke Color\n                  </Typography>\n                  <ColorPicker \n                        defaultValue={this.state.strokeColor} \n                        value={this.state.strokeColor}\n                        onChange={this.handleStrokeColorChange.bind(this)}\n                        hideTextfield\n                  />\n                </Paper>\n                <Paper className=\"p-2 w-50\" variant=\"outlined\">\n                  <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    Stroke Width\n                  </Typography>\n                  <div className=\"m-2 pr-2\">\n                    <Slider\n                      defaultValue={6}\n                      value={this.state.strokeWidth}\n                      //getAriaValueText={valuetext}\n                      aria-labelledby=\"discrete-slider\"\n                      valueLabelDisplay=\"auto\"\n                      step={1}\n                      marks\n                      min={1}\n                      max={30}\n                      onChange={this.handleStrokeSizeChange.bind(this)}\n                    />\n                  </div>\n                </Paper>\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n  \n}\n\nLineBottomToolbar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(LineBottomToolbar)\n","import React, { createRef } from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport { ColorPicker, createColor } from 'material-ui-color'\nimport { Select, Slider, Typography, MenuItem } from '@material-ui/core'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\n\nconst styles = theme => ({\n    root: {\n      flexGrow: 0,\n    },\n    paper: {\n      padding: theme.spacing(0),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n    title: {\n      fontSize: 14,\n    },\n}) \n\nfunction arrayEquals(a, b) {\n  return Array.isArray(a) &&\n    Array.isArray(b) &&\n    a.length === b.length &&\n    a.every((val, index) => val === b[index]);\n}\n\nclass RectBottomToolbar extends React.Component{\n  constructor(props){\n    super(props)\n\n    this.state = {\n      strokeColor: createColor(\"#000000\"),\n      strokeWidth: 6,\n      shadowColor: createColor(\"#000000\"),\n      shadowWidth: 0,\n      cornerRadius: 0,\n      fill: createColor(\"#00000000\"),\n    }\n  }\n\n  /* /////////////// Change UI functions /////////////// */ \n  // changes the selector state to syncronize it with the text value\n\n  //value should be a hex string not a color\n  changeStrokeColor( value ){\n    if(this.state.strokeColor != value){\n      this.setState({strokeColor: createColor(value)})\n    }\n  }\n\n  changeStroke( value ){\n    if(this.state.strokeWidth != value){\n      this.setState({strokeWidth: value})\n    }\n  }\n\n  //value should be a hex string not a color\n  changeShadowColor( value ){\n    if(this.state.shadowColor != value){\n      this.setState({shadowColor: createColor(value)})\n    }\n  }\n\n  changeShadowWidth( value ){\n    if(this.state.shadowWidth != value){\n      this.setState({shadowWidth: value})\n    }\n  }\n\n  changeCornerRadius( value ){\n    if(this.state.cornerRadius != value){\n        this.setState({cornerRadius: value})\n      }\n  }\n\n  changeFill( value ){\n    if(this.state.fill != value){\n        this.setState({fill: createColor(value)})\n      }\n  }\n\n  updateToolbar(strokeColor, strokeWidth, shadowColor, shadowWidth, cornerRadius, fill){\n    if( strokeColor != null)\n      this.changeStrokeColor(strokeColor)\n\n    if( strokeWidth != null)\n      this.changeStroke(strokeWidth)\n\n    if( shadowColor != null)\n      this.changeShadowColor(shadowColor)\n\n    if( shadowWidth != null)\n      this.changeShadowWidth(shadowWidth)\n\n    if( cornerRadius != null)\n      this.changeCornerRadius(cornerRadius)\n\n    if( fill != null)\n      this.changeFill(fill)\n  }\n\n  /*  ////////////////////////////////////////////////  */\n\n  /* /////////////// Handlers /////////////// */ \n  // updaters, update the canvas item\n  // state updates toolbar elements\n\n\n  handleStrokeColorChange = (value) => {\n    this.setState({strokeColor: value})\n    this.props.strokeColorUpdater(value)\n  }\n\n  handleShadowColorChange = (value) => {\n    this.setState({shadowColor: value})\n    this.props.shadowColorUpdater(value)\n  }\n\n  handleStrokeSizeChange = (event, value) => {\n    //event triggers onmousemove, so it floods, change state\n    //only when value changes (performance)\n    if(this.state.strokeWidth != value){\n      this.props.strokeSizeUpdater(value)\n      this.setState({strokeWidth: value})\n    }\n  }\n\n  handleShadowSizeChange = (event, value) => {\n    //event triggers onmousemove, so it floods, change state\n    //only when value changes (performance)\n    if(this.state.shadowSize != value){\n      this.props.shadowSizeUpdater(value)\n      this.setState({shadowWidth: value})\n    }\n  }\n\n  handleCornerRadiusChange = (event, value) => {\n    //event triggers onmousemove, so it floods, change state\n    //only when value changes (performance)\n    if(this.state.cornerRadius != value){\n      this.props.cornerRadiusUpdater(value)\n      this.setState({cornerRadius: value})\n    }\n  }\n\n  handleFillChange = (value) => {\n    //event triggers onmousemove, so it floods, change state\n    //only when value changes (performance)\n    if(this.state.fill != value){\n      this.props.fillUpdater(value)\n      this.setState({fill: value})\n    }\n  }\n\n  /*  ////////////////////////////////////////////////  */\n\n  render(){\n    const { classes } = this.props\n    return (\n      <div id='bottomtoolbar' className={classes.root}>\n          <Grid container spacing={0} justify=\"space-evenly\">\n          <Grid item xs={4} sm={4} md={4} className=\"d-flex\">\n          <Paper className=\"m-3 p-2 d-flex justify-content-around align-items-center flex-grow-1\" \n                   elevation={3}>\n                <Paper className=\"p-2 d-flex flex-column justify-content-around align-items-center\" variant=\"outlined\">\n                  <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    Shadow Color\n                  </Typography>\n                  <ColorPicker \n                        defaultValue={this.state.shadowColor} \n                        value={this.state.shadowColor}\n                        onChange={this.handleShadowColorChange.bind(this)}\n                        hideTextfield\n                  />\n                </Paper>\n                <Paper className=\"p-2 w-50\" variant=\"outlined\">\n                  <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    Shadow Width\n                  </Typography>\n                  <div className=\"m-2 pr-2\">\n                    <Slider\n                      value={this.state.shadowWidth}\n                      //getAriaValueText={valuetext}\n                      aria-labelledby=\"discrete-slider\"\n                      valueLabelDisplay=\"auto\"\n                      step={2}\n                      marks\n                      min={0}\n                      max={30}\n                      onChange={this.handleShadowSizeChange.bind(this)}\n                    />\n                  </div>\n                </Paper>\n            </Paper>\n          </Grid>\n          <Grid item xs={4} sm={4} md={4} className=\"d-flex\">\n          <Paper className=\"m-3 p-2 d-flex justify-content-around align-items-center flex-grow-1\" \n                   elevation={3}>\n                <Paper className=\"p-2 d-flex flex-column justify-content-around align-items-center\" variant=\"outlined\">\n                    <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                        Fill Color\n                    </Typography>\n                    <ColorPicker \n                            defaultValue={this.state.fill} \n                            value={this.state.fill}\n                            onChange={this.handleFillChange.bind(this)}\n                            hideTextfield\n                    />\n                  </Paper>\n                <Paper className=\"p-2 w-50\" variant=\"outlined\">\n                  <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    Corner Radius\n                  </Typography>\n                  <div className=\"m-2 pr-2\">\n                    <Slider\n                      value={this.state.cornerRadius}\n                      //getAriaValueText={valuetext}\n                      aria-labelledby=\"discrete-slider\"\n                      valueLabelDisplay=\"auto\"\n                      step={1}\n                      marks\n                      min={0}\n                      max={60}\n                      onChange={this.handleCornerRadiusChange.bind(this)}\n                      disabled={this.props.disableCornerRadius}\n                    />\n                  </div>\n                </Paper>\n            </Paper>\n          </Grid>\n          <Grid item xs={4} sm={4} md={4} className=\"d-flex\">\n            <Paper className=\"m-3 p-2 d-flex justify-content-around align-items-center flex-grow-1\" \n                   elevation={3}>\n                <Paper className=\"p-2 d-flex flex-column justify-content-around align-items-center\" variant=\"outlined\">\n                  <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    Stroke Color\n                  </Typography>\n                  <ColorPicker \n                        defaultValue={this.state.strokeColor} \n                        value={this.state.strokeColor}\n                        onChange={this.handleStrokeColorChange.bind(this)}\n                        hideTextfield\n                  />\n                </Paper>\n                <Paper className=\"p-2 w-50\" variant=\"outlined\">\n                  <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                    Stroke Width\n                  </Typography>\n                  <div className=\"m-2 pr-2\">\n                    <Slider\n                      defaultValue={6}\n                      value={this.state.strokeWidth}\n                      //getAriaValueText={valuetext}\n                      aria-labelledby=\"discrete-slider\"\n                      valueLabelDisplay=\"auto\"\n                      step={1}\n                      marks\n                      min={1}\n                      max={30}\n                      onChange={this.handleStrokeSizeChange.bind(this)}\n                    />\n                  </div>\n                </Paper>\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n  \n}\n\nRectBottomToolbar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(RectBottomToolbar)\n","import React, { createRef } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { ColorPicker, createColor } from 'material-ui-color'\r\nimport { Select, Slider, Typography, MenuItem } from '@material-ui/core'\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n      flexGrow: 0,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(0),\r\n      textAlign: 'center',\r\n      color: theme.palette.text.secondary,\r\n    },\r\n    title: {\r\n      fontSize: 14,\r\n    },\r\n}) \r\n\r\nfunction arrayEquals(a, b) {\r\n  return Array.isArray(a) &&\r\n    Array.isArray(b) &&\r\n    a.length === b.length &&\r\n    a.every((val, index) => val === b[index]);\r\n}\r\n\r\nclass ImageBottomToolbar extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      strokeColor: createColor(\"#000000\"),\r\n      strokeWidth: 0,\r\n      shadowColor: createColor(\"#000000\"),\r\n      shadowWidth: 0,\r\n      selectedFilter: \"Blur\",\r\n\r\n      //To change slider depending on the selected filter\r\n      sliderMin: 0,\r\n      sliderStep: 1,\r\n      sliderMax: 50,\r\n\r\n      selectedFilterValue: 0,\r\n\r\n      blurValue: 0,\r\n      brightenValue: 0,\r\n      pixelSizeValue: 1,\r\n      noiseValue: 0,\r\n      thresholdValue: 0\r\n    }\r\n\r\n  }\r\n\r\n  /* /////////////// Change UI functions /////////////// */ \r\n  // changes the selector state to syncronize it with the text value\r\n\r\n  //value should be a hex string not a color\r\n  changeStrokeColor( value ){\r\n    if(this.state.strokeColor != value){\r\n      this.setState({strokeColor: createColor(value)})\r\n    }\r\n  }\r\n\r\n  changeStroke( value ){\r\n    if(this.state.strokeWidth != value){\r\n      this.setState({strokeWidth: value})\r\n    }\r\n  }\r\n\r\n  //value should be a hex string not a color\r\n  changeShadowColor( value ){\r\n    if(this.state.shadowColor != value){\r\n      this.setState({shadowColor: createColor(value)})\r\n    }\r\n  }\r\n\r\n  changeShadowWidth( value ){\r\n    if(this.state.shadowWidth != value){\r\n      this.setState({shadowWidth: value})\r\n    }\r\n  }\r\n\r\n  changeBlurValue( value ){\r\n    if(this.state.blurValue != value){\r\n      this.setState({blurValue: value})\r\n    }\r\n  }\r\n\r\n  changeBrightnessValue( value ){\r\n    if(this.state.brightenValue != value){\r\n      this.setState({brightenValue: value})\r\n    }\r\n  }\r\n\r\n  changePixelSizeValue( value ){\r\n    if(this.state.pixelSizeValue != value){\r\n      this.setState({pixelSizeValue: value})\r\n    }\r\n  }\r\n\r\n  changeNoiseValue( value ){\r\n    if(this.state.noiseValue != value){\r\n      this.setState({noiseValue: value})\r\n    }\r\n  }\r\n\r\n  changeThresholdValue( value ){\r\n    if(this.state.thresholdValue != value){\r\n      this.setState({thresholdValue: value})\r\n    }\r\n  }\r\n\r\n  updateToolbar(strokeColor, strokeWidth, shadowColor, shadowWidth, \r\n                blurValue, brightenValue, pixelSizeValue, noiseValue, thresholdValue ){\r\n    if( strokeColor != null)\r\n      this.changeStrokeColor(strokeColor)\r\n\r\n    if( strokeWidth != null)\r\n      this.changeStroke(strokeWidth)\r\n\r\n    if( shadowColor != null)\r\n      this.changeShadowColor(shadowColor)\r\n\r\n    if( shadowWidth != null)\r\n      this.changeShadowWidth(shadowWidth)\r\n\r\n    if( blurValue != null){\r\n      this.changeBlurValue(blurValue)\r\n      this.setState({selectedFilter: \"Blur\",\r\n                     selectedFilterValue: blurValue})\r\n    }\r\n    \r\n    if( brightenValue != null)\r\n      this.changeBrightnessValue( brightenValue )\r\n    \r\n    if( pixelSizeValue != null)\r\n      this.changePixelSizeValue( pixelSizeValue )\r\n    \r\n    if( noiseValue != null)\r\n      this.changeNoiseValue( noiseValue )\r\n\r\n    if( thresholdValue != null)\r\n      this.changeThresholdValue( thresholdValue )\r\n  }\r\n\r\n  /*  ////////////////////////////////////////////////  */\r\n\r\n  /* /////////////// Handlers /////////////// */ \r\n  // updaters, update the canvas item\r\n  // state updates toolbar elements\r\n\r\n\r\n  handleStrokeColorChange = (value) => {\r\n    this.setState({strokeColor: value})\r\n    this.props.strokeColorUpdater(value)\r\n  }\r\n\r\n  handleShadowColorChange = (value) => {\r\n    this.setState({shadowColor: value})\r\n    this.props.shadowColorUpdater(value)\r\n  }\r\n\r\n  handleStrokeSizeChange = (event, value) => {\r\n    //event triggers onmousemove, so it floods, change state\r\n    //only when value changes (performance)\r\n    if(this.state.strokeWidth != value){\r\n      this.props.strokeSizeUpdater(value)\r\n      this.setState({strokeWidth: value})\r\n    }\r\n  }\r\n\r\n  handleShadowSizeChange = (event, value) => {\r\n    //event triggers onmousemove, so it floods, change state\r\n    //only when value changes (performance)\r\n    if(this.state.shadowSize != value){\r\n      this.props.shadowSizeUpdater(value)\r\n      this.setState({shadowWidth: value})\r\n    }\r\n  }\r\n\r\n  handleFilterChange = (event) => {\r\n    let value = event.target.value\r\n    console.log(\"Cambiando \", value)\r\n    console.log(this.state)\r\n\r\n    switch(value){\r\n      case \"Blur\":\r\n        this.setState({selectedFilter: value,\r\n                       selectedFilterValue: this.state.blurValue,\r\n                       sliderMin: 0,\r\n                       sliderMax: 50,\r\n                       sliderStep: 1})\r\n      break\r\n      case \"Brightness\":\r\n        this.setState({selectedFilter: value,\r\n                       selectedFilterValue: this.state.brightenValue,\r\n                       sliderMin: -1,\r\n                       sliderMax: 1,\r\n                       sliderStep: 0.05})\r\n      break\r\n      case \"Noise\":\r\n        this.setState({selectedFilter: value,\r\n                       selectedFilterValue: this.state.noiseValue,\r\n                       sliderMin: 0,\r\n                       sliderMax: 5,\r\n                       sliderStep: 0.2})\r\n      break\r\n      case \"Pixelate\":\r\n        this.setState({selectedFilter: value,\r\n                       selectedFilterValue: this.state.pixelSizeValue,\r\n                       sliderMin: 1,\r\n                       sliderMax: 50,\r\n                       sliderStep: 1})\r\n      break\r\n      case \"Mask\":\r\n        this.setState({selectedFilter: value,\r\n                       selectedFilterValue: this.state.thresholdValue,\r\n                       sliderMin: 0,\r\n                       sliderMax: 300,\r\n                       sliderStep: 1})\r\n      break\r\n    }\r\n\r\n    console.log(this.state)\r\n  }\r\n\r\n  handleFilterValueChange = (event, value) => {\r\n      if(this.state.selectedFilterValue != value){\r\n        switch(this.state.selectedFilter){\r\n          case \"Blur\":\r\n            this.props.blurValueUpdater(value)\r\n            this.setState({selectedFilterValue: value,\r\n                           blurValue: value})\r\n          break\r\n          case \"Brightness\":\r\n            this.props.brightnessValueUpdater(value)\r\n            this.setState({selectedFilterValue: value,\r\n                           brightenValue: value})\r\n          break\r\n          case \"Noise\":\r\n            this.props.noiseValueUpdater(value)\r\n            this.setState({selectedFilterValue: value,\r\n                           noiseValue: value})\r\n          break\r\n          case \"Pixelate\":\r\n            this.props.pixelValueUpdater(value)\r\n            this.setState({selectedFilterValue: value,\r\n                           pixelSizeValue: value})\r\n          break\r\n          case \"Mask\":\r\n            this.props.maskValueUpdater(value)\r\n            this.setState({selectedFilterValue: value,\r\n                           thresholdValue: value})\r\n          break\r\n        }\r\n          \r\n      }\r\n  }\r\n  \r\n  /*  ////////////////////////////////////////////////  */\r\n\r\n  render(){\r\n    const { classes } = this.props\r\n    return (\r\n      <div id='bottomtoolbar' className={classes.root}>\r\n          <Grid container spacing={0} justify=\"space-evenly\">\r\n          <Grid item xs={12} sm={10} md={6} className=\"d-flex\">\r\n          <Paper className=\"m-3 p-2 d-flex justify-content-around align-items-center flex-grow-1\" \r\n                   elevation={3}>\r\n                <Paper className=\"p-2 w-75\" variant=\"outlined\">\r\n                  <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                    Image Filter\r\n                  </Typography>\r\n                  <div className=\"d-flex\">\r\n                    <div className=\"m-2 pr-2 flex-grow-1\">\r\n                    <Select\r\n                      className=\"w-50\"\r\n                      id=\"dashSelector\"\r\n                      value={this.state.selectedFilter}\r\n                      defaultValue={\"Blur\"}\r\n                      onChange={this.handleFilterChange.bind(this)}\r\n                      label=\"Age\"\r\n                    >\r\n                        <MenuItem value={\"Blur\"}>Blur</MenuItem>\r\n                        <MenuItem value={\"Brightness\"}>Brightness</MenuItem>\r\n                        <MenuItem value={\"Noise\"}>Noise</MenuItem>\r\n                        <MenuItem value={\"Pixelate\"}>Pixelate</MenuItem>\r\n                        <MenuItem value={\"Mask\"}>Mask</MenuItem>\r\n                      </Select>\r\n                    </div>\r\n                  <div className=\"m-2 pr-2 w-50\">\r\n                      <Slider\r\n                        defaultValue={0}\r\n                        value={this.state.selectedFilterValue}\r\n                        //getAriaValueText={valuetext}\r\n                        aria-labelledby=\"discrete-slider\"\r\n                        valueLabelDisplay=\"auto\"\r\n                        step={this.state.sliderStep}\r\n                        marks\r\n                        min={this.state.sliderMin}\r\n                        max={this.state.sliderMax}\r\n                        onChange={this.handleFilterValueChange.bind(this)}\r\n                      />\r\n                  </div>\r\n                  </div>\r\n                </Paper>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nImageBottomToolbar.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(ImageBottomToolbar)\r\n\r\n\r\n/**\r\n * <Grid item xs={4} sm={4} md={4} className=\"d-flex\">\r\n    <Paper className=\"m-3 p-2 d-flex justify-content-around align-items-center flex-grow-1\" \r\n            elevation={3}>\r\n        <Paper className=\"p-2 d-flex flex-column justify-content-around align-items-center\" variant=\"outlined\">\r\n          <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n            Stroke Color\r\n          </Typography>\r\n          <ColorPicker \r\n                defaultValue={this.state.strokeColor} \r\n                value={this.state.strokeColor}\r\n                onChange={this.handleStrokeColorChange.bind(this)}\r\n                hideTextfield\r\n          />\r\n        </Paper>\r\n        <Paper className=\"p-2 w-50\" variant=\"outlined\">\r\n          <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n            Stroke Width\r\n          </Typography>\r\n          <div className=\"m-2 pr-2\">\r\n            <Slider\r\n              defaultValue={0}\r\n              value={this.state.strokeWidth}\r\n              //getAriaValueText={valuetext}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={1}\r\n              marks\r\n              min={0}\r\n              max={30}\r\n              onChange={this.handleStrokeSizeChange.bind(this)}\r\n            />\r\n          </div>\r\n        </Paper>\r\n    </Paper>\r\n  </Grid>\r\n */","import React, { createRef, useCallback, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\nimport TextBottomToolbar from './BottomToolbars/TextBottomToolbar'\nimport LineBottomToolbar from './BottomToolbars/LineBottomToolbar'\nimport RectBottomToolbar from './BottomToolbars/RectBottomToolbar'\nimport ImageBottomToolbar from './BottomToolbars/ImageBottomToolbar'\n\nclass BottomToolbar extends React.Component{\n  constructor(props){\n    super(props)\n\n    this.bottomToolbarRef = createRef()\n\n    this.fontSizeUpdater=props.fontSizeUpdater\n    this.fontColorUpdater=props.fontColorUpdater\n    this.strokeColorUpdater=props.strokeColorUpdater\n    this.strokeSizeUpdater=props.strokeSizeUpdater\n    this.fontFamilyUpdater=props.fontFamilyUpdater\n    this.alignmentUpdater=props.alignmentUpdater\n\n    this.shadowColorUpdater=props.shadowColorUpdater\n    this.shadowSizeUpdater=props.shadowSizeUpdater\n    this.dashUpdater=props.dashUpdater\n\n    this.cornerRadiusUpdater=props.cornerRadiusUpdater\n    this.fillUpdater=props.fillUpdater\n\n    this.blurValueUpdater=props.blurValueUpdater\n    this.brightnessValueUpdater=props.brightnessValueUpdater\n    this.noiseValueUpdater=props.noiseValueUpdater\n    this.pixelValueUpdater=props.pixelValueUpdater\n    this.maskValueUpdater=props.maskValueUpdater\n\n    this.state = {\n      selectedToolbar: \"SelectorAndText\"\n    }\n  }\n\n  changeBottomToolbar(newToolbarName){\n    this.setState({selectedToolbar: newToolbarName})\n  }\n\n  updateToolbar(){\n    let bottomToolbar = this.bottomToolbarRef.current\n    return bottomToolbar.updateToolbar.bind(bottomToolbar)\n  }\n\n  getBottomToolbar(){\n    switch(this.state.selectedToolbar){\n        case \"SelectorAndText\":\n          return <TextBottomToolbar \n                    ref={this.bottomToolbarRef}\n\n                    fontSizeUpdater    = {this.fontSizeUpdater}\n                    fontColorUpdater   = {this.fontColorUpdater}\n                    strokeColorUpdater = {this.strokeColorUpdater}\n                    strokeSizeUpdater  = {this.strokeSizeUpdater}\n                    fontFamilyUpdater  = {this.fontFamilyUpdater}\n                    alignmentUpdater   = {this.alignmentUpdater}\n                 />\n        break\n        case \"FreeLine\":\n            return <LineBottomToolbar \n                    ref={this.bottomToolbarRef}\n\n                    strokeColorUpdater = {this.strokeColorUpdater}\n                    strokeSizeUpdater  = {this.strokeSizeUpdater}\n                    shadowColorUpdater={this.shadowColorUpdater}\n                    shadowSizeUpdater={this.shadowSizeUpdater}\n                    dashUpdater={this.dashUpdater}\n                   />\n        break\n        case \"StraightLine\":\n            return <LineBottomToolbar \n                      ref={this.bottomToolbarRef}\n\n                      strokeColorUpdater = {this.strokeColorUpdater}\n                      strokeSizeUpdater  = {this.strokeSizeUpdater}\n                      shadowColorUpdater={this.shadowColorUpdater}\n                      shadowSizeUpdater={this.shadowSizeUpdater}\n                      dashUpdater={this.dashUpdater}\n                   />\n        break\n        case \"Rectangle\":\n        case \"Ellipse\":\n            return <RectBottomToolbar\n                      ref={this.bottomToolbarRef}\n\n                      //we can reuse the rectbottom toolbar but corner radius has no sense\n                      disableCornerRadius={this.state.selectedToolbar == \"Ellipse\"}\n\n                      strokeColorUpdater = {this.strokeColorUpdater}\n                      strokeSizeUpdater  = {this.strokeSizeUpdater}\n                      shadowColorUpdater={this.shadowColorUpdater}\n                      shadowSizeUpdater={this.shadowSizeUpdater}\n                      cornerRadiusUpdater={this.cornerRadiusUpdater}\n                      fillUpdater={this.fillUpdater}\n                   />\n        case \"KonvaImage\":\n          return <ImageBottomToolbar \n                      ref={this.bottomToolbarRef}\n\n                      strokeColorUpdater = {this.strokeColorUpdater}\n                      strokeSizeUpdater  = {this.strokeSizeUpdater}\n                      shadowColorUpdater={this.shadowColorUpdater}\n                      shadowSizeUpdater={this.shadowSizeUpdater}\n                      blurValueUpdater={this.blurValueUpdater}\n                      brightnessValueUpdater={this.brightnessValueUpdater}\n                      noiseValueUpdater={this.noiseValueUpdater}\n                      pixelValueUpdater={this.pixelValueUpdater}\n                      maskValueUpdater={this.maskValueUpdater}\n                 />\n        break\n    }\n}\n\n  render(){\n    return (\n      <React.Fragment>\n        {\n          this.getBottomToolbar()\n        }\n      </React.Fragment>\n    );\n  }\n  \n}\n\nexport default (BottomToolbar)","import React from 'react';\n\nimport { Button, Tooltip } from '@material-ui/core';\nimport { FileCopy } from '@material-ui/icons';\nimport Zoom from '@material-ui/core/Zoom';\nimport { wait } from '@testing-library/dom';\n\n\nexport default function CopytoClipboardButton(props) {\n  \n  let imageCopytoClipboard = props.copyHandler\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = (e) => {\n    imageCopytoClipboard()\n    \n    setOpen(true)\n    \n    setTimeout(function(){setOpen(false)}, 1500)\n  }\n  \n  return (\n    <Tooltip title=\"Copied to clipboard!\" \n             placement=\"left\" \n             TransitionComponent={Zoom} \n             open={open}\n             arrow \n             >\n    <Button id=\"copybutton\"\n            className=\"ml-auto p-0\" \n            color=\"grey\"\n            size='medium'\n            variant={ (props.enabled) ? \"outlined\" : \"contained\" }\n            disabled={ (props.enabled) ? true : false }\n            onClick={handleClick}\n            >\n        <FileCopy/>\n    </Button>\n    </Tooltip>\n  )\n}","import React, {useState, useEffect} from 'react'\n\nimport '../../assets/css/draganddrop.css'\nimport {validateFile} from '../Helpers/FileHelpers'\n\nconst containerdragOver = (e) => {\n    e.preventDefault()\n}\n\nconst containerdragEnter = (e) => {\n    e.preventDefault();\n    e.target.classList.toggle('shake')\n}\n\nconst containerdragLeave = (e) => {\n    e.preventDefault();\n    e.target.classList.toggle('shake')\n}\n\nexport default function SecondaryDragandDrop(props) {\n\n    const [width, setWidth] = useState(0)\n    const [height, setHeight] = useState(0)\n    const [,updateState] = useState()\n\n    let imgLoader = props.imgLoader\n\n    let lastTarget = null\n\n    useEffect(() => {\n        let canvas_container = document.getElementById('canvas-container')\n        let canvas = canvas_container.childNodes[2].firstChild.firstChild\n\n        setWidth(canvas.clientWidth)\n        setHeight(canvas.clientHeight)\n\n        window.addEventListener('dragenter', dragEnter)\n        window.addEventListener('dragleave', dragLeave)\n\n        //when UnMounts\n        return () => {\n            window.removeEventListener('dragenter', dragEnter)\n            window.removeEventListener('dragleave', dragLeave)\n        }\n    })\n    \n    const dragEnter = (e) => {\n        e.preventDefault();\n        \n        updateState(1)\n        \n        lastTarget = e.target\n        document.querySelector('#secondarydropbackground').style.visibility = \"\"\n        document.querySelector('#secondarydropbackground').style.opacity = \"0.8\"\n        document.querySelector('#secondarydropcontainer').style.visibility = \"\"\n        document.querySelector('#secondarydropcontainer').style.opacity = \"1\"\n    }\n    \n    const dragLeave = (e) => {\n        e.preventDefault();\n\n        if( e.target === lastTarget){\n            hideDropzone()\n        }\n    }\n\n    const hideDropzone = () => {\n        document.querySelector('#secondarydropbackground').style.visibility = \"hidden\"\n        document.querySelector('#secondarydropbackground').style.opacity = \"0\"\n        document.querySelector('#secondarydropcontainer').style.visibility = \"hidden\"\n        document.querySelector('#secondarydropcontainer').style.opacity = \"0\"\n    }\n\n    const fileDrop = (e) => {\n        e.preventDefault()\n        hideDropzone()\n        console.log(e)\n        e.target.classList.toggle('shake')\n        const files = e.dataTransfer.files\n\n        if (files.length) {\n            //Nos quedamos solo con el primer archivo\n            //Cambiar por un for si queremos tratar con multiselecciones\n            if (validateFile(files[0])) {\n\n                const reader = new FileReader()\n                reader.readAsDataURL(files[0])\n                reader.onload = (e) => {\n\n                    //Create image from load\n                    let image = new Image();\n                    image.src = e.target.result\n\n                    image.onload = () => {\n                        //send image to editor\n                        imgLoader(null, image)\n                    }\n                    \n                }\n            //File not valid\n            } else {\n        \n            }\n        }\n    }\n\n    return(\n        <React.Fragment>\n        <div id=\"secondarydropbackground\"\n                style={{visibility: 'hidden'}}\n        ></div>\n        <div className=\"drop-container\"\n            style={{width: width + 'px',\n                    height: height + 'px',\n                    visibility: 'hidden'}}\n            id=\"secondarydropcontainer\"\n            onDragOver={containerdragOver}\n            onDragEnter={containerdragEnter}\n            onDragLeave={containerdragLeave}\n            onDrop={fileDrop}\n        >\n                <div className=\"drop-message d-flex flex-column justify-content-center\">\n                    <div className=\"upload-icon m-4 align-self-center\"></div>\n                    <span className=\"w-100\">Drop an image to add it to the canvas</span>\n                </div>\n            </div>\n        </React.Fragment> \n    )\n}","\r\nimport React, {createRef, useEffect} from 'react';\r\nimport {Text} from 'react-konva'\r\n\r\nexport function handleTextDblClick(e){\r\n    //CAMBIAR ESTO PARA QUE COMPRUEBE SI LA IMAGEN ES LA IMAGEN BASE\r\n    if( e.target.className == \"Image\" ){\r\n        console.log(\"CREANDO NUEVO TEXTO\")\r\n        let new_text = <CvText\r\n                          key={this.state.itemArray.length}\r\n                          stage={this.stageRef}\r\n                          selectedItemChanger={this.changeSelectedItem.bind(this)}\r\n                          text='sample text'\r\n                          //fontsize * 3 is the half of the width\r\n                          //so it spawns on the center\r\n                          x={e.evt.offsetX - 70 * 3}\r\n                          y={e.evt.offsetY - 35}\r\n                          align={'center'}\r\n                          fontFamily={'Impact'}\r\n                          fontSize={70}\r\n                          fill={'white'}\r\n                          stroke={'black'}\r\n                          strokeWidth={2}\r\n\r\n                          draggable\r\n                       />\r\n\r\n        this.state.itemArray.push(new_text)\r\n\r\n        //push doesn't update the state\r\n        this.forceUpdate()\r\n    }\r\n}\r\n\r\nfunction CvText(props) {\r\n    //To get the bounds\r\n    const stageRef = props.stage\r\n    //To introduce the text inside on creation\r\n    const selectedItemChanger = props.selectedItemChanger\r\n    const textRef = createRef()\r\n\r\n    //On creation, spawn the editor\r\n    useEffect(() => {\r\n        //Spawn the editor\r\n        editText()\r\n        //Select the item\r\n        selectedItemChanger({type: 'CvText', item: textRef.current})\r\n    }, [])\r\n\r\n    //by default the transformer only changes the scale\r\n    //in this case we don't want the text to reescale so this method\r\n    //recalculates width and resets scale to change the real width\r\n    //so the text doesn't get distorted\r\n    const scaleReset = () => {\r\n        let text = textRef.current\r\n\r\n        text.setAttrs({\r\n            width: text.width() * text.scaleX(),\r\n            scaleX: 1,\r\n            height: text.height() * text.scaleY(),\r\n            scaleY: 1\r\n        })\r\n    }\r\n\r\n    const editText = () => {\r\n        let text = textRef.current\r\n\r\n        let editarea = document.createElement('textarea')\r\n        document.body.appendChild(editarea)\r\n\r\n        //Making editarea look like the konva text\r\n        let stageBox = stageRef.current.container().getBoundingClientRect();\r\n        editarea.value = text.getAttr('text')\r\n        editarea.style.textAlign = text.align()\r\n        editarea.style.position = 'absolute'\r\n        let abs_pos = text.getAbsolutePosition()\r\n        editarea.style.top  = (stageBox.top + abs_pos.y) + 'px'\r\n        editarea.style.left = (stageBox.left  + abs_pos.x) + 'px'\r\n        editarea.style.width = text.width() + 'px'\r\n        editarea.style.height = text.height() + 'px'\r\n        editarea.style.fontSize = text.fontSize() + 'px'\r\n        editarea.style.color = text.fill()\r\n\r\n        editarea.style.webkitTextStroke = text.stroke()\r\n        editarea.style.webkitTextStrokeWidth = text.strokeWidth() + 'px'\r\n\r\n        editarea.style.margin = '0px'\r\n        editarea.style.padding = '0px'\r\n        editarea.style.lineHeight = text.lineHeight()\r\n        editarea.style.resize = 'none'\r\n        editarea.style.background = 'none'\r\n        editarea.style.border = 'none'\r\n        editarea.style.outline = 'none'\r\n        editarea.style.resize = 'none'\r\n        editarea.style.lineHeight = text.lineHeight()\r\n        editarea.style.fontFamily = text.fontFamily()\r\n        editarea.style.transformOrigin = 'left top'\r\n        let rotation = text.rotation()\r\n        let rot_transformation = ''\r\n        if( rotation ){ rot_transformation += 'rotateZ('+rotation+'deg)'}\r\n        editarea.style.transform = rot_transformation\r\n\r\n        //Hide original text set focus on the editable area\r\n        text.hide()\r\n        editarea.focus()\r\n        editarea.setSelectionRange(0, editarea.value.length)\r\n        stageRef.current.batchDraw()\r\n\r\n        editarea.addEventListener('focusout', (e) => {\r\n            //apply changes, show text again(repaint), delete textarea\r\n            text.setAttrs({text: editarea.value})\r\n            text.show()\r\n            stageRef.current.batchDraw()\r\n            document.body.removeChild(editarea)\r\n        } )\r\n    }\r\n\r\n\r\n    return (\r\n        <Text\r\n            ref={textRef}\r\n            x={props.x}\r\n            y={props.y}\r\n            width={ props.fontSize * 6 }\r\n            height={ props.fontSize * 1 }\r\n            text={props.text}\r\n            \r\n            align={props.align}\r\n            fontSize={props.fontSize}\r\n            fontFamily={props.fontFamily}\r\n            fill={props.fill}\r\n            stroke={props.stroke}\r\n            strokeWidth={props.strokeWidth}\r\n\r\n            draggable={props.draggable}\r\n\r\n            onTransform={scaleReset}\r\n\r\n            onDblClick={editText}\r\n            onDblTap={editText}\r\n        />\r\n    )\r\n}\r\n\r\nexport default CvText","\nexport function handleSelectorMouseDown(e){\n    //when canvas is clicked, select the item that is clicked,\n    //or deselect if no item is clicked\n    let transformer = this.transformerRef.current\n\n    console.log(e.target.className)\n\n    //Ignores event if we are transforming \n    if( !transformer.isTransforming() ){\n        if( e.target.className === \"Text\" ){\n            this.changeSelectedItem({type: 'CvText', item: e.target})\n\n        } else if(e.target.className === \"Line\"){\n            this.changeSelectedItem({type: 'Line', item: e.target})\n\n        } else if(e.target.className === \"Rect\" || e.target.className === \"Ellipse\") {\n            this.changeSelectedItem({type: 'Rect', item: e.target})\n\n        } else if(e.target != this.kvMainImageRef.current){\n            this.changeSelectedItem({type: 'KonvaImage', item: e.target})\n        } else {\n            this.changeSelectedItem([])\n        }\n    }\n}","import {Line} from 'react-konva'\n\nexport function handleFreeLineMouseDown(e){\n    let pos = this.stageRef.current.getPointerPosition()\n\n    //get the bottomToolbar that is rendered\n    let bottomToolbar = this.bottomToolbarRef.current.bottomToolbarRef.current\n\n    let new_line = <Line\n                    key={this.state.itemArray.length}\n                    ref={this.lineRef}\n\n                    lineCap={\"round\"}\n\n                    stroke={'#'+bottomToolbar.state.strokeColor.hex}\n                    strokeWidth={bottomToolbar.state.strokeWidth}\n                    \n                    globalCompositeOperation={'source-over'}\n                    points={[pos.x, pos.y]}\n\n                    shadowColor={'#'+bottomToolbar.state.shadowColor.hex}\n                    shadowBlur={bottomToolbar.state.shadowWidth}\n\n                    dash={bottomToolbar.state.dashValue}\n\n                    draggable\n                   />\n\n    this.state.itemArray.push(new_line)\n\n    this.setState({isDrawing: true})\n}\n\nexport function handleFreeLineMouseMove(e){\n    if( this.state.isDrawing ){\n        let lastLine = this.lineRef.current\n        let pos = this.stageRef.current.getPointerPosition()\n        let newLinePoints = lastLine.points().concat([pos.x, pos.y])\n        lastLine.points(newLinePoints)\n        //redraw the changed line\n        this.stageRef.current.batchDraw()\n    }\n}\n\nexport function handleFreeLineMouseUp(e){\n    this.setState({isDrawing: false})\n}","import {Line} from 'react-konva'\n\nexport function handleStraightLineMouseDown(e){\n    let pos = this.stageRef.current.getPointerPosition()\n\n    //get the bottomToolbar that is rendered\n    let bottomToolbar = this.bottomToolbarRef.current.bottomToolbarRef.current\n\n    let new_line = <Line\n                    key={this.state.itemArray.length}\n                    ref={this.lineRef}\n\n                    lineCap={\"round\"}\n\n                    stroke={'#'+bottomToolbar.state.strokeColor.hex}\n                    strokeWidth={bottomToolbar.state.strokeWidth}\n                    \n                    globalCompositeOperation={'source-over'}\n                    points={[pos.x, pos.y, pos.x, pos.y]}\n\n                    shadowColor={'#'+bottomToolbar.state.shadowColor.hex}\n                    shadowBlur={bottomToolbar.state.shadowWidth}\n\n                    dash={bottomToolbar.state.dashValue}\n\n                    draggable\n                   />\n\n    this.state.itemArray.push(new_line)\n\n    this.setState({isDrawing: true})\n}\n\nexport function handleStraightLineMouseMove(e){\n    if( this.state.isDrawing ){\n        let lastLine = this.lineRef.current\n        let pos = this.stageRef.current.getPointerPosition()\n\n        let newLinePoints = lastLine.points()\n\n        newLinePoints[2] = pos.x\n        newLinePoints[3] = pos.y\n\n        lastLine.points(newLinePoints)\n\n        //redraw the changed line\n        this.stageRef.current.batchDraw()\n    }\n}\n\nexport function handleStraightLineMouseUp(e){\n    this.setState({isDrawing: false})\n}","import {Rect} from 'react-konva'\n\nexport function handleRectangleMouseDown(e){\n    let pos = this.stageRef.current.getPointerPosition()\n\n    //get the bottomToolbar that is rendered\n    let bottomToolbar = this.bottomToolbarRef.current.bottomToolbarRef.current\n\n    let new_rect = <Rect\n                    key={this.state.itemArray.length}\n                    ref={this.rectRef}\n\n                    x={pos.x}\n                    y={pos.y}\n\n                    width={0}\n                    height={0}\n\n                    fill={'#'+bottomToolbar.state.fill.hex}\n\n                    stroke={'#'+bottomToolbar.state.strokeColor.hex}\n                    strokeWidth={bottomToolbar.state.strokeWidth}\n\n                    shadowColor={'#'+bottomToolbar.state.shadowColor.hex}\n                    shadowBlur={bottomToolbar.state.shadowWidth}\n\n                    cornerRadius={bottomToolbar.state.cornerRadius}\n\n                    draggable\n                   />\n\n    //Data saving for creating the rectangle (width and height should be positive)\n    this.lastRectangle = {x: pos.x, y: pos.y,\n                          width: 0, height: 0}\n\n    this.state.itemArray.push(new_rect)\n\n    this.setState({isDrawing: true})\n}\n\nexport function handleRectangleMouseMove(e){\n    if( this.state.isDrawing ){\n        let lastRectangle = this.rectRef.current\n        let pos = this.stageRef.current.getPointerPosition()\n\n        let lrData = this.lastRectangle\n\n        lrData.width  = pos.x - lrData.x\n        lrData.height = pos.y - lrData.y\n\n        lastRectangle.setAttrs({\n            x: (lrData.width < 0) ? lrData.x + lrData.width : lrData.x,\n            y: (lrData.height < 0) ? lrData.y + lrData.height : lrData.y,\n            width: Math.abs(lrData.width),\n            height: Math.abs(lrData.height)\n        })\n\n        //redraw the changed line\n        this.stageRef.current.batchDraw()\n    }\n}\n\nexport function handleRectangleMouseUp(e){\n    if(this.state.isDrawing){\n        this.setState({isDrawing: false})\n    }\n}\n","import {Ellipse} from 'react-konva'\r\n\r\nexport function handleEllipseMouseDown(e){\r\n    let pos = this.stageRef.current.getPointerPosition()\r\n\r\n    //get the bottomToolbar that is rendered\r\n    let bottomToolbar = this.bottomToolbarRef.current.bottomToolbarRef.current\r\n\r\n    let new_rect = <Ellipse\r\n                    key={this.state.itemArray.length}\r\n                    ref={this.rectRef}\r\n\r\n                    x={pos.x}\r\n                    y={pos.y}\r\n\r\n                    width={0}\r\n                    height={0}\r\n\r\n                    fill={'#'+bottomToolbar.state.fill.hex}\r\n\r\n                    stroke={'#'+bottomToolbar.state.strokeColor.hex}\r\n                    strokeWidth={bottomToolbar.state.strokeWidth}\r\n\r\n                    shadowColor={'#'+bottomToolbar.state.shadowColor.hex}\r\n                    shadowBlur={bottomToolbar.state.shadowWidth}\r\n\r\n                    cornerRadius={bottomToolbar.state.cornerRadius}\r\n\r\n                    draggable\r\n                   />\r\n\r\n    //Data saving for creating the rectangle (width and height should be positive)\r\n    this.lastRectangle = {x: pos.x, y: pos.y,\r\n                          width: 0, height: 0}\r\n\r\n    this.state.itemArray.push(new_rect)\r\n\r\n    this.setState({isDrawing: true})\r\n}\r\n\r\nexport function handleEllipseMouseMove(e){\r\n    if( this.state.isDrawing ){\r\n        let lastRectangle = this.rectRef.current\r\n        let pos = this.stageRef.current.getPointerPosition()\r\n\r\n        let lrData = this.lastRectangle\r\n\r\n        lrData.width  = pos.x - lrData.x\r\n        lrData.height = pos.y - lrData.y\r\n\r\n        lastRectangle.setAttrs({\r\n            x: (lrData.width < 0)  ? lrData.x + (lrData.width/2)  \r\n                                    : lrData.x + (lrData.width / 2),\r\n            y: (lrData.height < 0) ? lrData.y + (lrData.height/2) \r\n                                    : lrData.y + (lrData.height / 2),\r\n            width: Math.abs(lrData.width),\r\n            height: Math.abs(lrData.height)\r\n        })\r\n\r\n        //redraw the changed line\r\n        this.stageRef.current.batchDraw()\r\n    }\r\n}\r\n\r\nexport function handleEllipseMouseUp(e){\r\n    if(this.state.isDrawing){\r\n        this.setState({isDrawing: false})\r\n    }\r\n}\r\n","import React, { createRef, fordwardRef } from 'react'\n\nimport DragandDrop from './EditorComponents/DragandDrop'\n\nimport '../assets/css/editor.css'\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport purple from '@material-ui/core/colors/purple';\nimport Button from '@material-ui/core/Button';\n//Icons\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport SaveIcon from '@material-ui/icons/Save';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\n\nimport Toolbar from './EditorComponents/Toolbar'\nimport BottomToolbar from './EditorComponents/BottomToolbar'\nimport TextBottomToolbar from './EditorComponents/BottomToolbars/TextBottomToolbar'\nimport LineBottomToolbar from './EditorComponents/BottomToolbars/LineBottomToolbar'\nimport CopytoClipboardButton from './EditorComponents/ToolShapes/CopytoClipboardButton'\nimport SecondaryDragandDrop from './EditorComponents/SecondaryDragandDrop'\nimport { Stage, Layer, Rect, Image as KonvaImage, Transformer, Line} from 'react-konva'\nimport {dataURLtoBlob} from './Helpers/FileHelpers'\n//canvas items\nimport CvText, { handleTextDblClick } from './EditorComponents/ToolShapes/CvText'\nimport {validateFile} from './Helpers/FileHelpers'\nimport { handleSelectorMouseDown } from './EditorComponents/ToolShapes/Selector';\nimport { handleFreeLineMouseDown, handleFreeLineMouseMove, handleFreeLineMouseUp } from './EditorComponents/ToolShapes/FreeLine';\nimport { handleStraightLineMouseDown, handleStraightLineMouseMove, handleStraightLineMouseUp } from './EditorComponents/ToolShapes/StraightLine';\nimport { handleRectangleMouseDown, handleRectangleMouseMove, handleRectangleMouseUp } from './EditorComponents/ToolShapes/Rectangle';\nimport { handleEllipseMouseDown, handleEllipseMouseMove, handleEllipseMouseUp } from './EditorComponents/ToolShapes/Ellipse';\n\n//Colors for the Mui\nconst theme = createMuiTheme({\n    palette: {\n        type: \"dark\",\n        primary: blue,\n        secondary: purple,\n    },\n});\n\nclass Editor extends React.Component{\n    constructor(props){\n        super(props)\n\n        this.stageRef = createRef()\n        this.mainLayerRef = createRef()\n        this.kvMainImageRef = createRef()\n        this.transformerRef = createRef()\n        this.bottomToolbarRef = createRef()\n\n        this.lineRef = createRef()\n        this.rectRef = createRef()\n        this.lastRectAttrs = {}\n\n        this.state = {\n            image: null,\n            itemArray: [],\n\n            selectedTool: \"SelectorAndText\",\n            isDrawing: false,\n        }\n    }\n\n    componentDidMount(){\n        //ctrl + v event\n        document.body.addEventListener('paste', this.handlePaste.bind(this))\n        \n        //make stage focusable\n        this.stageRef.current.container().tabIndex = 1\n        //delete event for the canvas items when stage onfocus\n        this.stageRef.current.container().addEventListener('keydown', this.handleKeyDown.bind(this))\n    }\n\n    //This should be called instead of transformer.nodes([])\n    //To change the selected item and syncronize the Toolbar \n    //with the new item props at the same time\n    //Note: should pass a {type: string, item: object} object\n    changeSelectedItem( node ){\n        //Nothing selected or incorrect\n        if(node.item == null || node.type == null){\n            console.log(\"Deselected\")\n            this.transformerRef.current.nodes([])\n        //Node is correct, select it\n        } else {\n            console.log(\"Selecting: \" + node.type)\n            console.log(node.item)\n\n            this.transformerRef.current.nodes([node.item])\n\n            let bottomToolbar = this.bottomToolbarRef.current\n            let nodeattrs = node.item.getAttrs()\n            switch( node.type ){\n                case 'CvText':\n                    //Change the toolbar\n                    this.changeBottomToolbar(\"SelectorAndText\")\n\n                    bottomToolbar.updateToolbar()( nodeattrs.align,\n                                                   nodeattrs.fontFamily,\n                                                   nodeattrs.fontSize,\n                                                   nodeattrs.fill,\n                                                   nodeattrs.stroke,\n                                                   nodeattrs.strokeWidth )\n                    break\n                case 'Line':\n                    this.changeBottomToolbar(\"FreeLine\")\n\n                    bottomToolbar.updateToolbar()( nodeattrs.stroke,\n                                                   nodeattrs.strokeWidth,\n                                                   nodeattrs.shadowColor,\n                                                   nodeattrs.shadowBlur,\n                                                   nodeattrs.dash )\n                    break\n                case 'Rect':\n                case 'Ellipse':\n                    this.changeBottomToolbar(\"Rectangle\")\n\n                    bottomToolbar.updateToolbar()( nodeattrs.stroke,\n                                                   nodeattrs.strokeWidth,\n                                                   nodeattrs.shadowColor,\n                                                   nodeattrs.shadowBlur,\n                                                   nodeattrs.cornerRadius,\n                                                   nodeattrs.fill )\n                    break\n                case 'KonvaImage':\n                    //Image toolbar\n                    this.changeBottomToolbar(\"KonvaImage\")\n\n                    bottomToolbar.updateToolbar()( nodeattrs.stroke,\n                                                   nodeattrs.strokeWidth,\n                                                   nodeattrs.shadowColor,\n                                                   nodeattrs.shadowBlur,\n                                                   nodeattrs.blurRadius,\n                                                   nodeattrs.brightness,\n                                                   nodeattrs.pixelSize,\n                                                   nodeattrs.noise,\n                                                   nodeattrs.threshold )\n                    break\n            }\n        }\n    }\n\n    changeBottomToolbar( bottomToolbarName ){\n        let bottomToolbar = this.bottomToolbarRef.current\n        console.log(\"bottomToolbar changed to: \" + bottomToolbarName)\n        bottomToolbar.changeBottomToolbar(bottomToolbarName)\n    }\n\n    calculate_resize(correlation, width, height){\n        //wide photo\n        if( correlation <= 1 ){\n            //image too small, dont correct\n            width = (width > 400 ? width - 100 : width)\n            //\n            if( correlation * width < height ){\n                height = (correlation * width) - 100\n                width = width - 100\n            } else {\n                width = height * (1/correlation) - 100\n                height = height - 100\n            }\n\n        //long photo\n        } else {\n            //image too small\n            height = (height > 400 ? height - 100 : height)\n            //\n            if( height * (1/correlation) < width ){\n                width = height * (1/correlation)\n                //height = height\n            } else {\n                width = width - 100\n                height = correlation * width - 100\n            }\n        }\n\n        return {\n            width: width,\n            height: height\n        }\n    }\n\n    imageLoader(image){\n\n        this.stageRef.current.setAttrs({visible: true})\n        this.setState({image: image});\n\n        //For scaling the image to the canvas width\n        //\n        let correlation = image.height / image.width;\n        console.log(\"correlation: \" + correlation);\n\n        let canvas_container = document.getElementById('canvas-container');\n        console.log(\"width:\" + canvas_container.clientWidth + \" height: \" + canvas_container.clientHeight)\n\n        let width = canvas_container.clientWidth\n        let height = canvas_container.clientHeight\n\n        let size = this.calculate_resize(correlation, width, height)\n\n        this.kvMainImageRef.current.setAttrs({\n            image: image,\n            width: size.width,\n            height: size.height,\n            x: 0,\n            y: 0\n        })\n\n        this.stageRef.current.setAttrs({\n            width: size.width,\n            height: size.height,\n            visible: true\n        })\n    }\n\n    imageUnloader(){\n        this.changeSelectedItem([])\n\n        this.setState({image: null,\n                       itemArray: []})\n        \n        //has to be greater than 0 because of a bug from the library\n        //so we make it invisible\n        this.stageRef.current.setAttrs({\n            width: 1,\n            height: 1,\n            visible: false\n        })\n    }\n\n    imageDownloader(){\n        //Unselect any item (the transform box would be printed otherwise)\n        this.changeSelectedItem([])\n        //pixel ratio 1,same resolution as screen\n        let data = this.stageRef.current.toDataURL({pixelRatio: 1})\n        let download_link = document.createElement('a')\n        download_link.download = 'edit_memehub'\n        download_link.href = data\n        download_link.click()\n    }\n\n    imageCopytoClipboard(){\n        //Unselect any item (the transform box would be printed otherwise)\n        this.changeSelectedItem([])\n        //pixel ratio 1,same resolution as screen\n        let data = this.stageRef.current.toDataURL({pixelRatio: 1})\n        let blob = dataURLtoBlob(data)\n\n        try {\n            navigator.clipboard.write([\n                new ClipboardItem({'image/png': blob})\n            ]);\n        } catch (error) { console.error(error) }\n    }\n\n    deleteSelectedItem(){\n        let transformer = this.transformerRef.current\n\n        //transformer onScreen & something is selected\n        if(transformer != null && transformer.nodes()[0] != null){\n            transformer.nodes()[0].destroy()\n            this.changeSelectedItem([])\n            this.stageRef.current.batchDraw()\n        }\n    }\n\n    duplicateSelectedItem(){\n        let transformer = this.transformerRef.current\n\n        //transformer onScreen & something is selected\n        if(transformer != null && transformer.nodes()[0] != null){\n            let element = transformer.nodes()[0]\n            console.log(element)\n            let duplicate = React.cloneElement( element )\n            console.log(duplicate)\n\n            this.state.itemArray.push(duplicate)\n\n            this.changeSelectedItem([duplicate])\n\n            this.forceUpdate()\n        }\n    }\n\n    changeSelectedTool(newTool){\n        if(newTool != null){\n            console.log(\"changed to: \", newTool)\n            //nothing should be selected when on change\n            this.changeSelectedItem([])\n            //change and update \n            this.setState({selectedTool: newTool})\n            this.changeBottomToolbar(newTool)\n        }\n    }\n\n    createNewSecondaryImage(e, image){\n        const reduction = 0.7\n\n        let correlation = image.height / image.width\n        let mainimage = this.kvMainImageRef.current\n        let width  = mainimage.getAttr('width')\n        let height = mainimage.getAttr('height')\n\n        let new_size = this.calculate_resize(correlation, width, height)\n\n        let newImageRef = createRef()\n        let new_image = <KonvaImage \n                            ref={newImageRef}\n                            key={this.state.itemArray.length}\n                            image={image}\n                            width={new_size.width * reduction}\n                            height={new_size.height * reduction}\n                            x={ (width / 2 ) - (new_size.width * reduction / 2)}\n                            y={ (height / 2) - (new_size.height * reduction / 2)}\n                            draggable\n\n                            filters={[Konva.Filters.Blur, Konva.Filters.Brighten, \n                                      Konva.Filters.Noise, Konva.Filters.Pixelate,\n                                      Konva.Filters.Mask]}\n                            blurRadius = {0} \n                            brightness = {0} // -1 | 1\n                            pixelSize  = {1}\n                            noise      = {0}\n                            threshold  = {0}\n                        />\n\n        this.state.itemArray.push(new_image)\n        //push doesn't update the state\n        this.forceUpdate()\n\n        //cache after render for the filters\n        //newImageRef.current.cache()\n\n        //After its rendered we get the ref (if not rendered, new_image is not a valid node)\n        let item = {type: 'KonvaImage', item: newImageRef.current}\n        //change to the correct tool\n        this.changeSelectedTool(\"SelectorAndText\")\n        this.changeSelectedItem(item)\n    }\n    \n\n    /**                                                                *\n     *                                                                 *\n     *                            HANDLERS                             *\n     *                                                                 *\n     *                                                                 */\n\n     handlePaste(e){\n        console.log(e)\n\n        let pasted_file = e.clipboardData.files[0]\n\n        console.log( pasted_file )\n\n        //Do nothing if there is no file\n        if(pasted_file == null) return false\n\n        //Main is already loaded or not?\n        if( this.state.image == null ){\n            this.handleMainPaste(e, pasted_file)\n        } else{\n            this.handleSecondaryPaste(e, pasted_file)\n        }\n    }\n\n     handleMainPaste(e, pasted_file){\n        if(validateFile(pasted_file)){\n            const reader = new FileReader();\n            reader.readAsDataURL(pasted_file);\n            reader.onload = (e) => {\n                //Create image from load\n                let image = new window.Image();\n                image.src = e.target.result;\n\n                image.onload = () => {\n                    //send image to editor\n                    this.imageLoader(image)\n                }\n            }\n        }\n    }\n\n    handleSecondaryPaste(e, pasted_file){\n        if(validateFile(pasted_file)){\n            const reader = new FileReader();\n            reader.readAsDataURL(pasted_file);\n            reader.onload = (e) => {\n                //Create image from load\n                let image = new window.Image();\n                image.src = e.target.result;\n\n                image.onload = () => {\n                    //send image to editor\n                    this.createNewSecondaryImage(e, image)\n                }\n            }\n        }\n    }\n\n    handleCtrlplusKey(e){\n        let charCode = String.fromCharCode(e.which).toLowerCase();\n        if(e.ctrlKey && charCode === 'c') {\n            console.log(\"Ctrl + C pressed\");\n            this.duplicateSelectedItem()\n        } else if(e.ctrlKey && charCode === 's') {\n            e.preventDefault();\n            console.log(\"Ctrl + S pressed\");\n        }\n    }\n\n    handleDelete(e){\n        //delete and backspace\n        if ( e.keyCode === 8 || e.keyCode === 46 ) {\n            this.deleteSelectedItem()\n        }\n    }\n\n    handleKeyDown(e){\n        this.handleDelete(e)\n        this.handleCtrlplusKey(e)\n    }\n    \n\n    /**                              MOUSE EVENTS                                  */\n\n    handleCanvasMouseDown(e){\n        switch(this.state.selectedTool){\n            case 'SelectorAndText': \n                handleSelectorMouseDown.bind(this)(e)\n            break\n\n            case 'FreeLine':\n                handleFreeLineMouseDown.bind(this)(e)\n            break\n\n            case 'StraightLine':\n                handleStraightLineMouseDown.bind(this)(e)\n            break\n\n            case 'Rectangle':\n                handleRectangleMouseDown.bind(this)(e)\n            break\n\n            case 'Ellipse':\n                handleEllipseMouseDown.bind(this)(e)\n            break\n        }\n    }\n\n    handleCanvasMouseUp(e){\n        switch(this.state.selectedTool){\n            case 'FreeLine':\n                handleFreeLineMouseUp.bind(this)(e)\n            break\n\n            case 'StraightLine':\n                handleStraightLineMouseUp.bind(this)(e)\n            break\n\n            case 'Rectangle':\n                handleRectangleMouseUp.bind(this)(e)\n            break\n\n            case 'Ellipse':\n                handleEllipseMouseUp.bind(this)(e)\n            break\n        }\n    }\n\n    handleCanvasMouseMove(e){\n        switch(this.state.selectedTool){\n            case 'FreeLine':\n                handleFreeLineMouseMove.bind(this)(e)\n            break\n\n            case 'StraightLine':\n                handleStraightLineMouseMove.bind(this)(e)\n            break\n\n            case 'Rectangle':\n                handleRectangleMouseMove.bind(this)(e)\n            break\n\n            case 'Ellipse':\n                handleEllipseMouseMove.bind(this)(e)\n            break\n        }\n    }\n\n    handleCanvasMouseLeave(e){\n        if(this.state.selectedTool == 'FreeLine'){\n            //If leave, end line\n            handleFreeLineMouseUp.bind(this)(e)\n        }\n    }\n\n    handleCanvasDblClick(e){\n        if(this.state.selectedTool == 'SelectorAndText'){\n            console.log(\"dobleclick\")\n            handleTextDblClick.bind(this)(e)\n        }\n    }\n\n    /** ************************************************************************** **/\n\n    updateTextSize( newSize ){\n        let text = this.transformerRef.current.nodes()[0]\n        \n        if(text != null && parseInt(newSize) > 0){\n            text.setAttr('fontSize', parseInt(newSize))\n            text.getStage().batchDraw()\n        }\n    }\n\n    updateTextColor( newColor ){\n        let text = this.transformerRef.current.nodes()[0]\n\n        if(text != null){\n            text.setAttr('fill', '#' + newColor.hex)\n            text.getStage().batchDraw()\n        }\n    }\n\n    updateStrokeColor( newColor ){\n        let text = this.transformerRef.current.nodes()[0]\n\n        if(text != null){\n            text.setAttr('stroke', '#' + newColor.hex)\n            text.getStage().batchDraw()\n        }\n    }\n\n    updateStrokeSize( newSize ){\n        let text = this.transformerRef.current.nodes()[0]\n\n        if(text != null){\n            text.setAttr('strokeWidth', newSize)\n            text.getStage().batchDraw()\n        }\n    }\n\n    updateShadowColor( newColor ){\n        let line = this.transformerRef.current.nodes()[0]\n\n        if(line != null){\n            line.setAttr('shadowColor', '#' + newColor.hex)\n            line.getStage().batchDraw()\n        }\n    }\n\n    updateDash( value ){\n        let line = this.transformerRef.current.nodes()[0]\n\n        if(line != null){\n            line.setAttr('dash', value)\n            line.getStage().batchDraw()\n        }\n    }\n\n    updateShadowSize( newSize ){\n        let line = this.transformerRef.current.nodes()[0]\n\n        if(line != null){\n            line.setAttr('shadowBlur', newSize)\n            line.getStage().batchDraw()\n        }\n    }\n\n    updateFontFamily( newFont ){\n        let text = this.transformerRef.current.nodes()[0]\n\n        if(text != null){\n            console.log(newFont)\n            text.setAttr('fontFamily', newFont)\n            text.getStage().batchDraw()\n        }\n    }\n\n    updateFontAlignment( newAlignment ){\n        let text = this.transformerRef.current.nodes()[0]\n\n        if(text != null){\n            console.log( newAlignment )\n            text.setAttr('align', newAlignment)\n            text.getStage().batchDraw()\n        }\n    }\n\n    updateCornerRadius( newRadius ){\n        let rect = this.transformerRef.current.nodes()[0]\n\n        if(rect != null){\n            console.log( newRadius )\n            rect.setAttr('cornerRadius', newRadius)\n            rect.getStage().batchDraw()\n        }\n    }\n\n    updateFill( newColor ){\n        let rect = this.transformerRef.current.nodes()[0]\n\n        console.log(newColor)\n\n        if(rect != null){\n            if( newColor == null ){\n                rect.setAttr('fill', newColor)\n            } else {\n                rect.setAttr('fill', '#' + newColor.hex)\n            }\n            \n            rect.getStage().batchDraw()\n        }\n    }\n\n    updateBlur( newValue ){\n        let img = this.transformerRef.current.nodes()[0]\n\n        if( img != null){\n            //change\n            img.blurRadius(newValue)\n            //Apply changes\n            img.cache()\n            //redraw\n            img.getStage().batchDraw()\n        }\n    }\n\n    updateBrightness( newValue ){\n        let img = this.transformerRef.current.nodes()[0]\n\n        if( img != null){\n            //change\n            img.brightness(newValue)\n            //Apply changes\n            img.cache()\n            //redraw\n            img.getStage().batchDraw()\n        }\n    }\n\n    updateNoise( newValue ){\n        let img = this.transformerRef.current.nodes()[0]\n\n        if( img != null){\n            //change\n            img.noise(newValue)\n            //Apply changes\n            img.cache()\n            //redraw\n            img.getStage().batchDraw()\n        }\n    }\n\n    updatePixelate( newValue ){\n        let img = this.transformerRef.current.nodes()[0]\n\n        if( img != null){\n            //change\n            img.pixelSize(newValue)\n            //Apply changes\n            img.cache()\n            //redraw\n            img.getStage().batchDraw()\n        }\n    }\n\n    updateMask( newValue ){\n        let img = this.transformerRef.current.nodes()[0]\n\n        if( img != null){\n            //change\n            img.threshold(newValue)\n            //Apply changes\n            img.cache()\n            //redraw\n            img.getStage().batchDraw()\n        }\n    }\n\n    render(){\n        return( \n            <ThemeProvider theme={theme}>\n            <div className='editor d-flex flex-column'>\n                <div className='d-flex flex-fill'>\n                <div id='canvas-container' className='d-flex justify-content-center align-items-center w-100' >\n\n                    {//If there is no image, show draganddrop input\n                    ( this.state.image == null ) ?\n                        <DragandDrop imgLoader={this.imageLoader.bind(this)}/> \n                        : \n                        <SecondaryDragandDrop \n                            imgLoader={this.createNewSecondaryImage.bind(this)}\n                        />\n                    }\n                    \n                    <Stage \n                      width={0} \n                      height={0} \n                      ref={this.stageRef}\n                      style={{outline: 'none'}}\n                      //onMouseDown={this.startCreateNewFreeLine.bind(this)}\n                      //onMouseUp={this.endCreateNewFreeLine.bind(this)}\n                      //onMouseLeave={this.endCreateNewFreeLine.bind(this)}\n                      //onMouseMove={this.continueCreateNewFreeLine.bind(this)}\n                    >\n                        <Layer\n                          ref={this.mainLayerRef}\n                          onMouseDown={this.handleCanvasMouseDown.bind(this)}\n                          onMouseMove={this.handleCanvasMouseMove.bind(this)}\n                          onMouseUp={this.handleCanvasMouseUp.bind(this)}\n                          onMouseLeave={this.handleCanvasMouseLeave.bind(this)}\n\n                          onDblClick={this.handleCanvasDblClick.bind(this)}\n                        >\n                            <KonvaImage\n                            //Main image\n                                ref={this.kvMainImageRef}>\n                            </KonvaImage>\n\n                            { //Renders all items into the canvas\n                            this.state.itemArray.map(Item => (\n                                React.cloneElement(\n                                    Item,\n                                    { draggable: (this.state.selectedTool == \"SelectorAndText\") }\n                                )\n                            ))\n                            }\n\n                            <Transformer\n                                ref={this.transformerRef}\n                                rotateEnabled={true}\n                                keepRatio={false}\n                            />\n                        </Layer>\n                    </Stage>\n\n                </div>\n                <nav id=\"sidetoolbar\" className=\"d-flex flex-column p-0 justify-content-between\">\n                    <div className=\"d-flex flex-column\">\n                    <button type='button' id=\"deletemainbutton\" className='btn btn-danger'\n                        style={{width: \"50px\", height: \"45px\"}}\n                        onClick={this.imageUnloader.bind(this)} \n                        variant=\"contained\"\n                        color=\"secondary\"\n                        disabled={ (this.state.image == null) ? true : false }\n                    >\n                        <DeleteIcon/>\n                    </button>\n\n                    <Toolbar\n                        tool={this.state.selectedTool}\n                        toolUpdater={this.changeSelectedTool.bind(this)}\n                    />\n                    </div>\n                    \n                    <div className=\"d-flex flex-column\">\n                    \n                    <CopytoClipboardButton\n                        copyHandler={this.imageCopytoClipboard.bind(this)}\n                        enabled={(this.state.image == null) ? true : false}\n                    />\n\n                    <Button id=\"downloadbutton\"\n                            className=\"ml-auto p-0 my-0\" \n                            color=\"primary\"\n                            size='medium'\n                            variant={ (this.state.image == null) ? \"outlined\" : \"contained\" }\n                            disabled={ (this.state.image == null) ? true : false }\n                            onClick={this.imageDownloader.bind(this)}\n                            >\n                        <SaveIcon/>\n                    </Button>\n                    </div>\n                </nav>\n                </div>\n\n                <BottomToolbar\n                    ref={this.bottomToolbarRef}\n\n                    fontSizeUpdater={this.updateTextSize.bind(this)}\n                    fontColorUpdater={this.updateTextColor.bind(this)}\n                    strokeColorUpdater={this.updateStrokeColor.bind(this)}\n                    strokeSizeUpdater={this.updateStrokeSize.bind(this)}\n                    fontFamilyUpdater={this.updateFontFamily.bind(this)}\n                    alignmentUpdater={this.updateFontAlignment.bind(this)}\n\n                    shadowColorUpdater={this.updateShadowColor.bind(this)}\n                    shadowSizeUpdater={this.updateShadowSize.bind(this)}\n                    dashUpdater={this.updateDash.bind(this)}\n\n                    cornerRadiusUpdater={this.updateCornerRadius.bind(this)}\n                    fillUpdater={this.updateFill.bind(this)}\n\n                    blurValueUpdater={this.updateBlur.bind(this)}\n                    brightnessValueUpdater={this.updateBrightness.bind(this)}\n                    noiseValueUpdater={this.updateNoise.bind(this)}\n                    pixelValueUpdater={this.updatePixelate.bind(this)}\n                    maskValueUpdater={this.updateMask.bind(this)}\n                />\n\n            </div>\n            </ThemeProvider>\n        );\n    }\n\n}\n\nexport default Editor;\n","import React from \"react\";\n\nclass Home extends React.Component{\n\n    render(){\n        return(\n            <h1><a href=\"/editor\">EDITOR</a></h1>\n        );\n    }\n\n}\n\nexport default Home;\n","import React from \"react\";\n\nclass NoMatch extends React.Component{\n\n    render(){\n        return(\n            <h1>ERROR 404</h1>\n        );\n    }\n\n}\n\nexport default NoMatch;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@material-ui/core';\n\nimport './assets/css/App.css';\n\nimport Editor from './components/Editor';\nimport Home from './components/Home';\nimport NoMatch from './components/NoMatch';\n\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Editor} />\n          <Route exact path=\"/editor\" component={Editor} />\n          <Route component={Editor} />\n        </Switch>\n      </Router>\n\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}